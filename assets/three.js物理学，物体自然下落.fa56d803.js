import{o as e,c as n,a as t}from"./index.391a9efd.js";const s={class:"markdown-body"},o=t('<html><p class="title" style="display:none;">three.js物理学，物体自然下落 </p></html><html><p class="article_id" style="display:none;">6915256491062591502</p></html><html><p class="target" style="display:none;">threejs</p></html><html><p class="create_time" style="display:none;">1610083674000</p></html><html><p class="update_time" style="display:none;">1610083674001</p></html><html><p class="cover_image" style="display:none;">https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8879ff88a3d0442ca3f780abb6890845~tplv-k3u1fbpfcp-watermark.image</p></html><html><p class="brief_content" style="display:none;">在之前的文章中写到堆叠游戏，基本上每一步都有写这是之前的实现效果可以在这里体验游戏其中没有做完的无效区域自由下落，将在本文中介绍第一步，引入文件物体自然下落需要物理学的插件，ammo.wasm.js和</p></html><p>在之前的文章中写到<a href="https://juejin.cn/post/6911909496050843655">堆叠游戏</a>， 基本上每一步都有写</p><p>这是之前的实现效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6da4e5bd36834b0e96fadb4e4c9905f9~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p><a href="https://sunhuapeng.github.io/#/iframe?url=html%2F%E4%B8%AD%E7%BA%A7%E6%A1%88%E4%BE%8Bhtml%2F%E5%A0%86%E5%8F%A0%E6%B8%B8%E6%88%8F.html">可以在这里体验游戏</a></p><p>其中没有做完的无效区域自由下落，将在本文中介绍</p><h4>第一步，引入文件</h4><p>物体自然下落需要物理学的插件，<code>ammo.wasm.js</code> 和 <code>AmmoPhysics.js</code> AmmoPhysics.js是基于ammo.js封装的，</p><p>所以需要将两个插件都引入到项目中</p><pre><code class="language-html">&lt;script src=\\&quot;./static/js/ammo.wasm.js\\&quot;&gt;&lt;/script&gt;\n</code></pre><pre><code class="language-typescript">import { AmmoPhysics } from &#39;../utils/AmmoPhysics.js&#39;;\n</code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86e908c300f84d148188f12c8a66d443~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>源码中<code>AmmoPhysics</code>返回的是一个Promise对象</p><pre><code class="language-typescript">init()\n\nasync function init() {\n    physics = await AmmoPhysics();\n  console.log(physics)\n}\n</code></pre><p>打印出<code>physics</code> 提供两个方法，其中<code>addmesh</code>将需要实现物体下落的模型添加进去</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed544c7d5ce2470c9343769bc312d5e9~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h4>第二步：添加底板</h4><pre><code class="language-typescript">const floor = new THREE.Mesh(\n    new THREE.BoxBufferGeometry(100, 5, 100),\n  new THREE.MeshNormalMaterial({ color: 0x111111 })\n);\n_this.scene.add(floor);\n</code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b7772abaa2744fca8f88240da1f3424~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>接下来将底板添加到<code>physics</code>中</p><pre><code>physics.addMesh(floor);\n</code></pre><p><code>addMesh</code> 接受两个参数，第一个参数是需要施加力的物体，第二个参数是数字，可选，默认为<code>0</code>，如果不填，物体将作为底板存在</p><p><code>addMesh</code> 部分代码</p><pre><code class="language-javascript">function addMesh( mesh, mass = 0 ) {\n  \n    const shape = getShape( mesh.geometry );\n\n    if ( shape !== null ) {\n  \n        if ( mesh.isInstancedMesh ) {\n  \n            handleInstancedMesh( mesh, mass, shape );\n\n        } else if ( mesh.isMesh ) {\n  \n            handleMesh( mesh, mass, shape );\n\n        }\n\n    }\n\n}\n</code></pre><p>现在将底板的<code>position.y</code>设置为100，让底板从高度100的位置降落</p><pre><code>floor.position.y = 100\nphysics.addMesh(floor, 1);\n</code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c77f142e443d4e3b83cc985c3653f755~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>目前算是实现了某个物体的自由降落，接下来将<code>floor</code>恢复，并另创建两个自由落体</p><pre><code class="language-typescript">const material = new THREE.MeshNormalMaterial();\n\nconst matrix = new THREE.Matrix4();\n\nconst geometryBox = new THREE.BoxBufferGeometry(5, 5, 5);\nvar boxes = new THREE.InstancedMesh(geometryBox, material, 2);\n_this.scene.add(boxes);\n\nfor (let i = 0; i &lt; boxes.count; i++) {\n  \n  matrix.setPosition(Math.random() - 10, (i + 1) * 10, Math.random() - (i * 4));\n  boxes.setMatrixAt(i, matrix);\n}\n\nphysics.addMesh(boxes, 1);\n</code></pre><p>创建两个实例化网格，官网上介绍实例化网格可以提升渲染性能</p><blockquote><p>你可以使用 InstancedMesh 来渲染大量具有相同几何体与材质、但具有不同世界变换的物体。 使用 InstancedMesh 将帮助你减少 draw call 的数量，从而提升你应用程序的整体渲染性能。</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8879ff88a3d0442ca3f780abb6890845~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>物体自然下落的小例子大概就是这样，接下来需要将自由下落的物体添加到游戏中</p><p>在游戏中，<code>floorGroup</code>中的每一个物体都将设置为不加力的物体，将所有的无效区域设置为自然下落的物体</p><h4>嵌入到游戏</h4><h5>底板</h5><p>在游戏第一次创建底板的时候定义物理学</p><p>定义一个<code>initAmmo</code>方法用来赋值<code>AmmoPhysics</code>方法</p><p>然后将底板加入进去</p><pre><code class="language-typescript">async initAmmo() {\n    this.physics = await AmmoPhysics();\n  this.initFloor()\n}\n</code></pre><p>创建底板的方法，跟改造之前有点区别</p><pre><code class="language-typescript">initFloor() {\n    // 定义物理学插件\n  // this.physics = await new AmmoPhysics();\n  const w: number = this.size\n  const h: number = 50\n  const l: number = this.size\n  const floorParams = {\n      w: w,\n    h: h,\n    l: l,\n    x: w / 2,\n    y: h / 2,\n    z: l / 2\n  }\n  this.floorCube = createCube(floorParams);\n  // 临时将底板透明度降低0.5 方便观察物体降落\n  (this.floorCube.material as THREE.Material).transparent = true;\n  (this.floorCube.material as THREE.Material).opacity = 0.5\n  // 将第一个底板添加到物理学插件中\n  this.floorGroup.add(this.floorCube)\n  this.floorGroup.updateMatrix()\n\n  // 创建一个跟底板相同位置信息的实例化网格\n  const floor = instancedMesh(this.floorCube)\n  this.physics.addMesh(floor)\n  console.log(this.physics)\n  // 创建一个可降落物体\n  const geometry = new THREE.BoxGeometry(5, 5, 5);\n  const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n  const cube = new THREE.Mesh(geometry, material);\n  cube.position.y = 80\n  const box = instancedMesh(cube)\n  this.floorGroup.add(box)\n  // 参数传1 物体将以下落属性进行运动\n  this.physics.addMesh(box, 1)\n}\n</code></pre><p>创建实例化网格的方法</p><pre><code class="language-typescript">// 创建实体网格\nexport function instancedMesh(box: any, position?:THREE.Vector3) {\n    const size = new THREE.Vector3()\n  getSize(box, size)\n  const material = new THREE.MeshNormalMaterial();\n  // 创建实例化网格\n  const geometryBox = new THREE.BoxBufferGeometry(size.x, size.y, size.z);\n  var boxes = new THREE.InstancedMesh(geometryBox, material, 1);\n  // 定义一个四维矩阵，用来存放物体的位置信息\n  const matrix = new THREE.Matrix4();\n  // 将位置信息传入到四维矩阵中\n  if(position &amp;&amp; position instanceof THREE.Vector3) {\n      matrix.setPosition(position.clone())\n  } else {\n      matrix.setPosition(box.position.clone())\n  }\n  // 将四维矩阵设置到新的实体网格模型中\n  boxes.setMatrixAt(0, matrix);\n  return boxes\n}\n</code></pre><p>可以先看一下刚创建的<code>box</code>的运动效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fa12cd6c7674244b08897e5b597b2e2~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p><code>box</code>作为自然降落物体， <code>floor</code>作为底板物体不动，当自然降落物体碰撞到底板物体，将进行<code>物理碰撞</code>效果，</p><p>就像现实中，从比桌子高的位置扔下一个方块，遇到桌子角，将进行碰撞、反转、降落等一系列物理运动</p><p>接下来就是要对主角分出的有效区域和无效区域进行操作</p><h5>有效区域</h5><p>有效区域的效果和底板的效果是相同的，都不进行运动，所以第一步创建一个与有效区域等同信息的实例化网格</p><pre><code class="language-typescript">// 克隆一个有效区域\nconst newMesh:any = meshArr[0].clone();\n\n// 临时处理材质为透明\n(newMesh.material as THREE.Material).transparent = true;\n(newMesh.material as THREE.Material).opacity = 0.5\n\n// 获取主角的中心点作为有效区域底板的位置\nconst center = new THREE.Vector3()\ngetCenter(newMesh, center)\n\nconst phyMesh = instancedMesh(this.floorCube, center)\n// 有效区域不动，第二参数默认不传\nthis.physics.addMesh(phyMesh)\n</code></pre><p><code>getCenter</code> 是封装好的获取元素中心点的方法，新创建的实例化网格将以这个中心点作为<code>pisition</code>信息</p><pre><code class="language-typescript">export function getCenter(mesh:THREE.Object3D, v3: THREE.Vector3) {\n    if (v3 instanceof THREE.Vector3) {\n      getBox(mesh).getCenter(v3);\n  }\n}\n</code></pre><p>接下来再创建一个可移动方块对新创建的实例化网格进行测试</p><pre><code class="language-typescript">// 获取主角的中心点作为有效区域底板的位置\nconst center = new THREE.Vector3()\ngetCenter(newMesh, center)\n// console.log(center)\n\nconst phyMesh = instancedMesh(newMesh, center.clone())\n// this.floorGroup.add(phyMesh)\n// 有效区域不动，第二参数默认不传\nthis.physics.addMesh(phyMesh,1)\n// 创建一个测试方块\nconst geometry = new THREE.BoxGeometry(5, 5, 5);\nconst material = new THREE.MeshNormalMaterial();\nconst cube = new THREE.Mesh(geometry, material);\nconst newCenter = center.clone()\n// 获取有效区域尺寸，将测试方块放置在有效区域边缘\nconst size = new THREE.Vector3()\ngetSize(newMesh, size)\nnewCenter.y = newCenter.y + 15\nnewCenter.x = newCenter.x + size.x/2\ncube.position.copy(newCenter)\ncube.updateMatrix ()\n\n// 创建一个实例化网格\nconst phyCube = instancedMesh(cube)\nthis.floorGroup.add(phyCube)\n// 将测试方块创建的实例化网格作为可移动对象进行测试\nthis.physics.addMesh(phyCube, 1)\n</code></pre><p>测试方块遇到有效区域边缘，碰撞，翻滚，降落，再遇到底板边缘，碰撞，翻滚，降落</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08cb4269a07e4d279844ddc27b39d47a~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>有效区域的处理大致就是这样，接下来将处理一下无效区域，作为自由降落的物体</p><h5>无效区域处理</h5><p>堆叠层外面的视为无效区域</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/414a53d9024b4395b94c4e3e69ed8072~tplv-k3u1fbpfcp-watermark.image" alt=""></p><pre><code class="language-typescript">// 判断无效区域\nif (meshArr[1]) {\n    // 创建无效区域实体网格\n  const newMesh = meshArr[1]\n\n  // 获取无效区域中心点\n  const center = new THREE.Vector3()\n  getCenter(newMesh, center)\n\n  // 创建无效区域实体化网格\n  const phyMesh = instancedMesh(newMesh, center)\n\n  this.invalidGroup.add(phyMesh)\n  // 自由落体\n  this.physics.addMesh(phyMesh, 1)\n\n}\n</code></pre><p>一层的实现效果，可能看不出来效果，如果是多层可以体验到更好的效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/874a6e8d8dbe4f6bb572181fada62bd8~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>多层的效果，可能动图比较大，加载比较慢</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed5df53582604d26a9972ac928aa3442~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h4>结束</h4><p>好啦，堆叠游戏写到这里就可以宣告结束了，可能会有一些bug或者其他问题，有时间慢慢优化吧~</p><p>在之前的文章写过其他的步骤</p><p><a href="https://juejin.cn/post/6911909496050843655">第一步 基础 初始化游戏</a></p><p><a href="https://juejin.cn/post/6911947391369216013">第二步 控制 控制主角移动以及停止</a></p><p><a href="https://juejin.cn/post/6912306652632842247">第三步 切割等功能</a></p><p><a href="https://juejin.cn/post/6912362707928907790">第四步 结束判定，记分器等</a></p><p><a href="https://github.com/sunhuapeng/stacking-blocks/tree/master">代码</a></p><p>感兴趣的童鞋可以<a href="https://sunhuapeng.github.io/#/iframe?url=html%2F%E4%B8%AD%E7%BA%A7%E6%A1%88%E4%BE%8Bhtml%2F%E5%A0%86%E5%8F%A0%E6%B8%B8%E6%88%8F.html">体验一下</a>，欢迎童鞋们在评论区打出你们的分数哦</p><blockquote><p>没有bug的程序 不是好程序!!!&quot;</p></blockquote>',83),p={expose:[],setup:t=>(defineExpose({frontmatter:{}}),(t,p)=>(e(),n("div",s,[o])))};export default p;
