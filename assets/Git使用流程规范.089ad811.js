import{o as e,c as t,a as p}from"./index.391a9efd.js";const a={class:"markdown-body"},o=p('<html><p class="title" style="display:none;">Git使用流程规范 </p></html><html><p class="article_id" style="display:none;">68449041430442149203</p></html><html><p class="target" style="display:none;">git</p></html><html><p class="create_time" style="display:none;">1589054435001</p></html><html><p class="update_time" style="display:none;">1519054435004</p></html><html><p class="cover_image" style="display:none;"> https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8768f3a464a64596abbce522a8acd54f~tplv-k3u1fbpfcp-zoom-crop-mark:1304:1304:1304:734.image</p></html><html><p class="brief_content" style="display:none;">Git使用流程规范</p></html><h3>Git使用流程规范</h3><h5>第一步：将仓库代码拉取到本地</h5><blockquote><p>克隆远程仓库地址</p></blockquote><pre><code class="language-bash">git clone git@gitlab.uniubi.com:sunhuapeng/git_play.git\n</code></pre><blockquote><p>更新master分支代码</p></blockquote><pre><code class="language-bash">git checkout dev\n</code></pre><blockquote><p>创建本地分支</p></blockquote><pre><code class="language-bash">git checkout -b my-branch \t\n</code></pre><p><em><strong>本地分支命名规范：<code>feat_shp_v1.1.1 </code></strong></em></p><p>feat：分支标的</p><p>shp：自己分支的标识</p><p>v：当前分支为某个版本号</p><h5>第二步：提交</h5><blockquote><p>将修改的文件添加到暂存区</p></blockquote><pre><code class="language-bash">git add -A\n</code></pre><pre><code class="language-bash">git add .\n</code></pre><p>add 命令 -A将添加所有修改过的文件，包括未跟踪文件</p><blockquote><p>取消添加的文件</p></blockquote><p>取消全部添加的文件</p><pre><code class="language-bash">git reset\n</code></pre><p>取消某一个添加的文件</p><pre><code class="language-bash">git reset 某个文件名\n</code></pre><blockquote><p>提交到本地仓库</p></blockquote><pre><code class="language-bash">git commit -am &#39;提交信息&#39;\n</code></pre><blockquote><p>取消本地提交</p></blockquote><p>撤回到暂存区</p><pre><code class="language-bash">git reset --soft HEAD^\n</code></pre><p>撤回到挂起的更改</p><pre><code class="language-bash">git reset HEAD^\n</code></pre><blockquote><p>查看已提交内容</p></blockquote><pre><code class="language-bash">git diff --staged 某个节点\n</code></pre><blockquote><p>拉取远端合并分支的代码</p></blockquote><pre><code class="language-bash">git pull origin dev --rebase\n</code></pre><p><em><strong>建议使用<code>git pull --rebase</code> ，禁止直接使用 <code>git pull</code></strong></em></p><p>两者区别在于拉取后的节点顺序不一样或者多节点</p><p><code>git pull</code></p><p><img src="http://chuantu.xyz/t6/741/1605681724x1700338641.png" alt="没加--rebase"></p><p><code>git pull --rebase</code></p><p><img src="http://chuantu.xyz/t6/741/1605681926x1031866013.png" alt=""></p><blockquote><p>推送到远程本地仓库</p></blockquote><pre><code class="language-bash">git push \n</code></pre><p>新建分支后首次提交会提醒</p><pre><code class="language-bash">git push --set-upstream origin my-branch\n</code></pre><p>将在远程创建一个同名分支</p><h5>工作流程</h5><p><img src="http://chuantu.xyz/t6/741/1605689757x1700338641.jpg" alt=""></p><p>为保证git分支流向的单一性、可操作性，分支一律使用merge进行合并，<code>my-brach </code>都将使用 <code>git pull --rebase </code>进行代码的拉取</p><blockquote><p>分支说明</p></blockquote><table><thead><tr><th>分支名称</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>master</td><td>主分支</td><td>受保护</td></tr><tr><td>dev</td><td>合并分支</td><td>流向test分支</td></tr><tr><td>test</td><td>测试环境分支</td><td>来源可为dev和bug-master</td></tr><tr><td>inner</td><td>开发环境分支</td><td></td></tr><tr><td>my-brach</td><td>个人分支</td><td></td></tr></tbody></table>',56),c={expose:[],setup:p=>(defineExpose({frontmatter:{}}),(p,c)=>(e(),t("div",a,[o])))};export default c;
