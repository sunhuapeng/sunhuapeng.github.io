import{o as n,c as t,a as e}from"./index.391a9efd.js";const r={class:"markdown-body"},o=e('<html><p class="title" style="display:none;">算法基础——异或运算符（^）的骚操作 </p></html><html><p class="article_id" style="display:none;">6911574885470994439</p></html><html><p class="target" style="display:none;">算法</p></html><html><p class="create_time" style="display:none;">1609226430000</p></html><html><p class="update_time" style="display:none;">1609226430002</p></html><html><p class="cover_image" style="display:none;">https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17b9c7d5689e4ab2a622ada76200a247~tplv-k3u1fbpfcp-watermark.image</p></html><html><p class="brief_content" style="display:none;">这是百度百科给出的解释对于程序算法来说归零律1^1输出0相同的输出0，恒等律1^0输出1二进制异或运算|2|1|0|number||---|---|---|---||1|0|1|5||1|1|0|6|</p></html><h3>异或运算符</h3><p>这是<a href="https://baike.baidu.com/item/%E5%BC%82%E6%88%96/10993677?fr=aladdin">百度百科</a>给出的解释</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b327c44c4c544ec68850496ba86502a6~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>对于程序算法来说 归零律 <code>1 ^ 1</code> 输出 0 相同的输出0，恒等律 <code>1 ^ 0</code> 输出1</p><p>二进制异或运算</p><table><thead><tr><th>2</th><th>1</th><th>0</th><th>number</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>5</td></tr><tr><td>1</td><td>1</td><td>0</td><td>6</td></tr><tr><td>1^1=0</td><td>0^1=1</td><td>1^0=1</td><td>5^6=3</td></tr><tr><td>0</td><td>1</td><td>1</td><td>3</td></tr></tbody></table><p>从这个表格可以看出来 <code>5^6</code> 输出结果是3</p><p>从表格看，还是比较清晰的，那么下面看一下十进制和二进制之间的关系</p><p>（为啥十进制的5转为2进制是101）</p><h3>十进制转二进制</h3><p>使用短除法</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17b9c7d5689e4ab2a622ada76200a247~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>javascript转换方法是<code>num.toString(2)</code> 十进制数字转为二进制</p><p>可以通过这样的规律写出一个转换工具，方便理解</p><pre><code class="language-javascript">BinaryToDecimalSystem = function (num) {\n    if (typeof num === \\&quot;number\\&quot;) {\n      const nrArr = [];\n    // 通过根号计算出需要除几次2 （二进制有几位）\n    const s = Math.ceil(Math.sqrt(num));\n    let n = num;\n    // 需要计算s次\n    for (let i = s; i &gt;= 0; i--) {\n        let nr = n % 2 === 0 ? 0 : 1;\n      // 数组向后添加\n      nrArr.unshift(nr);\n      // 将下一次的计算值赋值给n\n      n = Math.floor(n / 2);\n    }\n    // 至于输出格式这里是数组转字符串 字符串转数字\n    // 也可以不用数组的unshift，可以直接+=的方式直接输出字符串\n    return Number(nrArr.join(\\&quot;\\&quot;));\n  } else {\n      return \\&quot;error\\&quot;;\n  }\n};\nconst decimal = BinaryToDecimalSystem(65);\nconsole.log(decimal); // 1000001\n</code></pre><p>试了几个数字 感觉没什么异样，如果还有其他逻辑，可以一起沟通</p><p>可以通过这个方法计算出 5的二进制是<code>101</code> 6的二进制是<code>110</code></p><p>那么二进制异或算法得出结果 <code>011</code> 转数字 0去掉 结果是 <code>11</code></p><p>那么接下来就是将<code>11</code>通过二进制转十进制的方法 得出结果3 javascript提供的方法是</p><pre><code>var num = 11\nparseInt(num,2) // 3\n</code></pre><p>我们通过自己写的方法来计算一下 方便理解</p><p>二进制转十进制采用按权相加法，以<code>1100100</code>为例 转换结果应该是100</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1e2e28188da43c0ae8d504165955f5a~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>同样可以通过这个逻辑写一个方法</p><pre><code class="language-javascript">DecimalSystemToBinary = function (num) {\n    if (typeof num === \\&quot;number\\&quot;) {\n      const toStr = num.toString();\n    const len = toStr.length;\n    let count = 0;\n    for (let i = 1; i &lt;= len; i++) {\n        let n = Number(toStr[i - 1]);\n      if (n !== 0) {\n          count += n * 2 ** (len - i);\n      }\n    }\n    return count\n  } else {\n      return &#39;error&#39;\n  }\n};\n\nconst count = DecimalSystemToBinary(11);\nconsole.log(count) // 3\n</code></pre><p>通过这样的互相转换方法 轻易的计算出 <code>5^6=3</code></p><p>例题</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/743527fc56994c43880bc61bd61ae2ce~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>在使用异或运算符之前 我们可以通过自己的方法来实现这个功能</p><pre><code class="language-javascript">var singleNumber = function (nums) {\n    let num = nums.sort((a, b) =&gt; {\n      return a - b;\n  });\n  let n = num[0];\n  for (let i = 1; i &lt; num.length; i++) {\n      if (n === num[i]) {\n        n = num[i + 1] || num[num.length-1];\n      i++\n    }\n  }\n  return n;\n};\nconst arr = [4,1,2,1,2];\nconsole.log(singleNumber(arr));  // 4\n</code></pre><p>用这种方法 又要排序 又要循环 很复杂 如果用<code>异或运算符</code>的话 几行代码就搞定</p><pre><code class="language-javascript">    var singleNumber = function (nums) {\n        let n = 0;\n      for (let i = 0; i &lt; nums.length; i++) {\n          n ^= nums[i]\n      }\n      return n;\n    };\n    const arr = [2,2,1];\n    console.log(singleNumber(arr)); // 4\n</code></pre><p>这种写法非常简便，而且高效，看起来比较复杂 我们分开几步，一步一步看具体怎么实现的</p><pre><code class="language-javascript">var singleNumber = function (nums) {\n    let n = 0;\n  // for (let i = 0; i &lt; nums.length; i++) {\n    //   n ^= nums[i]\n  // }\n  let a = nums[0]\n  let b = nums[1]\n  let c = nums[2]\n\n  n = n^a // 0^2 ==&gt; n=2  恒等率\n  n = n^b // 2^2 ==&gt; n=0  归零率\n  n = n^c // 0^1 ==&gt; n=1  恒等率\n  return n;\n};\nconst arr = [2,2,1];\nconsole.log(singleNumber(arr)); // 1\n</code></pre><p>另一种情况</p><pre><code class="language-javascript">var singleNumber = function (nums) {\n    let n = 0;\n  // for (let i = 0; i &lt; nums.length; i++) {\n    //   n ^= nums[i]\n  // }\n  let a = nums[0]\n  let b = nums[1]\n  let c = nums[2]\n\n  n = n^a // 0^1 ==&gt; n=1 衡等律\n  n = n^b // 1^3 ==&gt; n=2 交换律\n  n = n^c // 2^3 ==&gt; n=1 交换律\n  return n;\n};\nconst arr = [1,3,3];\nconsole.log(singleNumber(arr)); // 1\n\n```&quot;\n</code></pre>',43),a={expose:[],setup:e=>(defineExpose({frontmatter:{}}),(e,a)=>(n(),t("div",r,[o])))};export default a;
