import{o as e,c as t,a as p}from"./index.391a9efd.js";const n={class:"markdown-body"},a=p('<html><p class="title" style="display:none;">3D堆叠游戏——第四步 结束判定，记分器等 </p></html><html><p class="article_id" style="display:none;">6912362707928907790</p></html><html><p class="target" style="display:none;">typescript|threejs</p></html><html><p class="create_time" style="display:none;">1609409892000</p></html><html><p class="update_time" style="display:none;">1609409892000</p></html><html><p class="cover_image" style="display:none;">https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bba865b9e0943c7b7c5fb539b51081e~tplv-k3u1fbpfcp-watermark.image</p></html><html><p class="brief_content" style="display:none;">上一篇写的是裁切主角分为有效区域和无效区域有效区域作为底板放置在场景内，无效区域做自由落体下落并删除镜头跟进在每放置一块主角的时候镜头随之向上移动游戏结束判定判定游戏结束首先判定底板和主角没有交集，就</p></html><p><a href="https://juejin.cn/post/6912306652632842247">上一篇</a>写的是裁切主角分为有效区域和无效区域</p><p>有效区域作为底板放置在场景内，无效区域做自由落体下落并删除</p><h3>镜头跟进</h3><p>在每放置一块主角的时候镜头随之向上移动</p><pre><code class="language-typescript">  moveCamera(){\n      // 定义控制器target的y值\n    const oldty = this.controls.target.y\n    const newty = oldty + 1 // 每一次向上移动1\n    console.log(oldty, newty)\n    let tween:any = NumberAnimate(oldty, newty, 100)\n    tween.onUpdate(()=&gt;{\n        this.controls.target.setY(tween._object.p)\n    })\n  }\n</code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bba865b9e0943c7b7c5fb539b51081e~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h3>游戏结束判定</h3><p>判定游戏结束 首先判定底板和主角没有交集，就是裁切的有效区域的顶点信息为空</p><pre><code class="language-typescript">intersectResult.geometry.vertices.length &gt; 0\n</code></pre><p>另一种情况是未操作空格进行放置 就是主角运动结束而没有点击的情况</p><p>判定游戏结束后，将镜头拉至全景</p><p>将场景下所有内容展现出来</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2eb9c3a57984d51ae81ff1705320f62~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h3>记分环节</h3><p>记分可以按照堆叠高度计算 也可以按照堆叠数量计算 可以按照剩余总面积计算</p><p>咱们搞个高难度的，按照搭建表面积计算</p><p>每次叠加的有效区域表面积相加得出记分结果</p><p>通过box3得到有效区域的尺寸，再将每个有效区域记录在页面</p><p>计算有效区域的方法之前封装过<code>getsize</code>，继续使用这个再次封装一个<code>getarea</code></p><pre><code class="language-typescript">export function getArea(mesh):number {\n    const size = new THREE.Vector3()\n  getSize(mesh, size)\n  const area = Math.floor(size.x * size.z)\n  return area\n}\n</code></pre><p>页面上需要一个dom节点用来呈现分数</p><pre><code class="language-typescript">fractionDom:HTMLElement = document.querySelector(&#39;#fraction&#39;)\n</code></pre><p>给dom节点赋值</p><pre><code class="language-typescript"> upDateFraction(){\n      this.fractionDom.innerText = this.areaCount + &#39;&#39;\n  }\n</code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/528dd4f8368e4d33b8580dc704d930fd~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h3>制作开始按钮</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9cb1d53c5afb429ab7fe273ff7644da1~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>开始按钮功能</p><pre><code class="language-typescript">const mark: HTMLElement = document.querySelector(&#39;#mark&#39;)\nconst startBtn: HTMLElement = document.querySelector(&#39;#start-game&#39;)\nconsole.log(mark, startBtn)\nif (mark &amp;&amp; startBtn) {\n    console.log(startBtn)\n  startBtn.onclick = function () {\n      mark.style.display = &#39;none&#39;\n    // 缩放镜头\n    createGame.restart()\n  }\n}\n</code></pre><p>restart 功能 将变量重置之后，拉近镜头，调整视角，重新绘制主角</p><pre><code class="language-typescript">restart() {\n    if (this.isOver) {\n      this.floorGroup.remove(...this.floorGroup.children)\n    this.leadCount = 0\n    this.leadCube = null\n    this.tween = null\n    this.T = 2000\n    this.flag = false\n    this.isOver = false // 是否游戏结束\n    this.areaCount = 0  // 分数\n    this.upDateFraction()\n    this.scene.updateMatrix()\n    this.initFloor()\n  }\n  this.undateCameraZoom(5.5, () =&gt; {\n      // 开始创建第一个主角\n    this.createlead()\n  })\n}\n</code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d47377a48144ea29acb929c05b49e09~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h3>结束</h3><p>游戏开发到次就差不多完事了，剩下的就是一些代码的规范了</p><p>ts中尽量不要出现any这种类型规范</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/060a37c145804373a3b19dd40aa51a71~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>以接口为例</p><pre><code>interface Element {\n    scene: THREE.Object3D\n  camera: THREE.OrthographicCamera\n  controls: OrbitControls\n}\n\nconstructor(element: Element) {\n    this.scene = element.scene\n  this.camera = element.camera\n  this.controls = element.controls\n  this.floorGroup = new THREE.Group()\n  this.scene.add(this.floorGroup)\n  this.initFloor()\n  window.addEventListener(&#39;keydown&#39;, this.leadStop.bind(this))\n}\n</code></pre><p>如果要规定一个three元素类型 比如scene 场景，就可以在官网上看scene的基类是哪个</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d6c9c29ab644c49bfbebfb0206a3ad1~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>它的基类是object3d 所以可以用<code>THREE.Object3D</code>对它进行约束</p><p>如果你使用的方法在基类中没有 比如scene的<code>autoUpdate</code>这个方法是在自己本身的</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8892946a966444dfae52455f07890dde~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>那么就需要将值规范为 <code>THREE.Scene</code></p><pre><code>scene: THREE.Scene\n</code></pre><p>然后就不报错啦</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e97257b08e34a87a915d4af4375d833~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>也可以直接写本身，看需求呗</p><p>其实可以兼容一下移动端，毕竟手游目前比较受欢迎啊</p><p><a href="https://sunhuapeng.github.io/#/iframe?url=html%2F%E4%B8%AD%E7%BA%A7%E6%A1%88%E4%BE%8Bhtml%2F%E5%A0%86%E5%8F%A0%E6%B8%B8%E6%88%8F.html">猛戳这里体验</a></p><h3>欢迎童鞋们在评论区打出自己的分数</h3><p><a href="https://juejin.cn/post/6911909496050843655">3D堆叠游戏——第一步 基础 初始化游戏</a></p><p><a href="https://juejin.cn/post/6911947391369216013">3D堆叠游戏——第二步 控制 控制主角移动以及停止</a></p><p><a href="https://juejin.cn/post/6912306652632842247">3D堆叠游戏——第三步 切割等功能</a></p><p><a href="https://github.com/sunhuapeng/stacking-blocks/tree/master">代码</a></p><h3>跨年啦，祝大家新年快乐</h3><h3>准备放纵一下，上完今天的班，今年就不工作了</h3><h3>2021 犇向美好</h3><p>&quot;</p>',66),s={expose:[],setup:p=>(defineExpose({frontmatter:{}}),(p,s)=>(e(),t("div",n,[a])))};export default s;
