(function(e){function t(t){for(var o,l,s=t[0],i=t[1],p=t[2],c=0,d=[];c<s.length;c++)l=s[c],Object.prototype.hasOwnProperty.call(a,l)&&a[l]&&d.push(a[l][0]),a[l]=0;for(o in i)Object.prototype.hasOwnProperty.call(i,o)&&(e[o]=i[o]);h&&h(t);while(d.length)d.shift()();return r.push.apply(r,p||[]),n()}function n(){for(var e,t=0;t<r.length;t++){for(var n=r[t],o=!0,l=1;l<n.length;l++){var s=n[l];0!==a[s]&&(o=!1)}o&&(r.splice(t--,1),e=i(i.s=n[0]))}return e}var o={},l={app:0},a={app:0},r=[];function s(e){return i.p+"js/"+({}[e]||e)+"."+{"chunk-0bb7c892":"8afba66a","chunk-1bd67462":"632135da","chunk-2d6b4cec":"d109aa47","chunk-3c9debc4":"5641e8c4","chunk-4be458be":"1cbc8fc2","chunk-5bc0c3a4":"0c50b57d","chunk-75a1af8b":"52a70549","chunk-7f31fee3":"c04c48bc"}[e]+".js"}function i(t){if(o[t])return o[t].exports;var n=o[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(e){var t=[],n={"chunk-0bb7c892":1,"chunk-1bd67462":1,"chunk-2d6b4cec":1,"chunk-3c9debc4":1,"chunk-4be458be":1,"chunk-5bc0c3a4":1,"chunk-75a1af8b":1,"chunk-7f31fee3":1};l[e]?t.push(l[e]):0!==l[e]&&n[e]&&t.push(l[e]=new Promise((function(t,n){for(var o="css/"+({}[e]||e)+"."+{"chunk-0bb7c892":"5bef8f65","chunk-1bd67462":"65d1d783","chunk-2d6b4cec":"e7a954dc","chunk-3c9debc4":"436a3e53","chunk-4be458be":"ebf69cd9","chunk-5bc0c3a4":"0e433876","chunk-75a1af8b":"c075d0d4","chunk-7f31fee3":"fe98a613"}[e]+".css",a=i.p+o,r=document.getElementsByTagName("link"),s=0;s<r.length;s++){var p=r[s],c=p.getAttribute("data-href")||p.getAttribute("href");if("stylesheet"===p.rel&&(c===o||c===a))return t()}var d=document.getElementsByTagName("style");for(s=0;s<d.length;s++){p=d[s],c=p.getAttribute("data-href");if(c===o||c===a)return t()}var h=document.createElement("link");h.rel="stylesheet",h.type="text/css",h.onload=t,h.onerror=function(t){var o=t&&t.target&&t.target.src||a,r=new Error("Loading CSS chunk "+e+" failed.\n("+o+")");r.code="CSS_CHUNK_LOAD_FAILED",r.request=o,delete l[e],h.parentNode.removeChild(h),n(r)},h.href=a;var u=document.getElementsByTagName("head")[0];u.appendChild(h)})).then((function(){l[e]=0})));var o=a[e];if(0!==o)if(o)t.push(o[2]);else{var r=new Promise((function(t,n){o=a[e]=[t,n]}));t.push(o[2]=r);var p,c=document.createElement("script");c.charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.src=s(e);var d=new Error;p=function(t){c.onerror=c.onload=null,clearTimeout(h);var n=a[e];if(0!==n){if(n){var o=t&&("load"===t.type?"missing":t.type),l=t&&t.target&&t.target.src;d.message="Loading chunk "+e+" failed.\n("+o+": "+l+")",d.name="ChunkLoadError",d.type=o,d.request=l,n[1](d)}a[e]=void 0}};var h=setTimeout((function(){p({type:"timeout",target:c})}),12e4);c.onerror=c.onload=p,document.head.appendChild(c)}return Promise.all(t)},i.m=e,i.c=o,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i.oe=function(e){throw console.error(e),e};var p=window["webpackJsonp"]=window["webpackJsonp"]||[],c=p.push.bind(p);p.push=t,p=p.slice();for(var d=0;d<p.length;d++)t(p[d]);var h=c;r.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("56d7")},"013f":function(e,t){var n='<html> <p class=name style=display:none>Git使用流程规范</p> </html> <html> <p class=tag style=display:none>前端</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605704186x1033347913.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1605704213421</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1605704213421</p> </html> <html> <p class=brief style=display:none>GIT使用规范的意义:提高团队整体的交流和运作效率，使用规范 能够独立部署的工程使用master和dev两个主干分支,master分支对应线上版本,dev分支对应开发版本; 作为依赖库使用的工作只需要一个master分支...</p> </html> <h3 id=git使用流程规范>Git使用流程规范</h3> <h5 id=第一步：将仓库代码拉取到本地>第一步：将仓库代码拉取到本地</h5> <blockquote> <p>克隆远程仓库地址</p> </blockquote> <pre><code class=language-bash>git clone git@gitlab.uniubi.com:sunhuapeng/git_play.git</code></pre> <blockquote> <p>更新master分支代码</p> </blockquote> <pre><code class=language-bash>git checkout dev</code></pre> <blockquote> <p>创建本地分支</p> </blockquote> <pre><code class=language-bash>git checkout -b my-branch     </code></pre> <p><strong><em>本地分支命名规范：<code>feat_shp_v1.1.1</code></em></strong></p> <p>feat：分支标的</p> <p>shp：自己分支的标识</p> <p>v：当前分支为某个版本号</p> <h5 id=第二步：提交>第二步：提交</h5> <blockquote> <p>将修改的文件添加到暂存区</p> </blockquote> <pre><code class=language-bash>git add -A</code></pre> <pre><code class=language-bash>git add .</code></pre> <p>add 命令 -A将添加所有修改过的文件，包括未跟踪文件</p> <blockquote> <p>取消添加的文件</p> </blockquote> <p>取消全部添加的文件</p> <pre><code class=language-bash>git reset</code></pre> <p>取消某一个添加的文件</p> <pre><code class=language-bash>git reset 某个文件名</code></pre> <blockquote> <p>提交到本地仓库</p> </blockquote> <pre><code class=language-bash>git commit -am &#39;提交信息&#39;</code></pre> <blockquote> <p>取消本地提交</p> </blockquote> <p>撤回到暂存区</p> <pre><code class=language-bash>git reset --soft HEAD^</code></pre> <p>撤回到挂起的更改</p> <pre><code class=language-bash>git reset HEAD^</code></pre> <blockquote> <p>查看已提交内容</p> </blockquote> <pre><code class=language-bash>git diff --staged 某个节点</code></pre> <blockquote> <p>拉取远端合并分支的代码</p> </blockquote> <pre><code class=language-bash>git pull origin dev --rebase</code></pre> <p><strong><em>建议使用<code>git pull --rebase</code> ，禁止直接使用 <code>git pull</code></em></strong></p> <p>两者区别在于拉取后的节点顺序不一样或者多节点</p> <p><code>git pull</code></p> <p><img src=http://chuantu.xyz/t6/741/1605681724x1700338641.png alt=没加--rebase></p> <p><code>git pull --rebase</code></p> <p><img src=http://chuantu.xyz/t6/741/1605681926x1031866013.png alt=""></p> <blockquote> <p>推送到远程本地仓库</p> </blockquote> <pre><code class=language-bash>git push </code></pre> <p>新建分支后首次提交会提醒</p> <pre><code class=language-bash>git push --set-upstream origin my-branch</code></pre> <p>将在远程创建一个同名分支</p> <h5 id=工作流程>工作流程</h5> <p><img src=http://chuantu.xyz/t6/741/1605689757x1700338641.jpg alt=""></p> <p>为保证git分支流向的单一性、可操作性，分支一律使用merge进行合并，<code>my-brach</code>都将使用 <code>git pull --rebase</code>进行代码的拉取</p> <blockquote> <p>分支说明</p> </blockquote> <table> <thead> <tr> <th>分支名称</th> <th>说明</th> <th>备注</th> </tr> </thead> <tbody><tr> <td>master</td> <td>主分支</td> <td>受保护</td> </tr> <tr> <td>dev</td> <td>合并分支</td> <td>流向test分支</td> </tr> <tr> <td>test</td> <td>测试环境分支</td> <td>来源可为dev和bug-master</td> </tr> <tr> <td>inner</td> <td>开发环境分支</td> <td></td> </tr> <tr> <td>my-brach</td> <td>个人分支</td> <td></td> </tr> </tbody></table> ';e.exports=n},"04a9":function(e,t,n){var o={"./Git使用流程规范.md":"013f","./Typescript 的数据类型.md":"439c","./css选择器练习·动态五星好评.md":"20e8","./css高频面试题，你真的会么.md":"1faa","./typescript 笔记.md":"b148","./光源.md":"0733","./初入THREE.js.md":"d6a3","./前端面试题总结.md":"1a96","./游·梦想小镇.md":"fc27","./点.md":"cc4a","./玩一玩线.md":"e748","./秒级加载大型3D模型.md":"8e5d","./线.md":"7bef","./网格材质对象.md":"1894","./记 · 双十一，城西银泰薅羊毛.md":"6046","./轨道控制器.md":"a92b","./面.md":"c41e"};function l(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}l.keys=function(){return Object.keys(o)},l.resolve=a,e.exports=l,l.id="04a9"},"0733":function(e,t){var n='<html> <p class=name style=display:none>光源</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://n.sinaimg.cn/sinacn11/680/w400h280/20180511/263d-hamfahw1625944.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1588063723000</p> </html> <html> <p class=id style=display:none>1588063723000</p> </html> <html> <p class=brief style=display:none>环境光会均匀的照亮场景中的所有物体。 环境光不能用来投射阴影，因为它没有方向，也不会体现物体的棱角 </p> </html> <h3 id=环境光>环境光</h3> <p>光源的基类为<a href=https://threejs.org/docs/index.html#api/zh/lights/Light>Light</a></p> <h5 id=ambientlight>AmbientLight</h5> <p>环境光会均匀的照亮场景中的所有物体。</p> <p>环境光不能用来投射阴影，因为它没有方向，也不会体现物体的棱角</p> <pre><code class=language-javascript>/**\n * 创建网格模型\n */\nvar geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个立方体几何对象Geometry\nvar material = new THREE.MeshLambertMaterial({\n  color: 0xffffff,\n}); //材质对象Material\nvar mesh = new THREE.Mesh(geometry, material); //网格模型对象Mesh\nscene.add(mesh); //网格模型添加到场景中\n\nvar light = new THREE.AmbientLight(0x404040); // soft white light\nscene.add(light);</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603875196x1031866013.png alt=""></p> <h5 id=可接受参数>可接受参数</h5> <p>color, intensity</p> <p>颜色和光照强度</p> <h5 id=color>color</h5> <pre><code class=language-javascript>var light = new THREE.AmbientLight(0xff0000); // soft white light\nscene.add(light);</code></pre> <p>模型本身的颜色设置为白色，受平行光照射颜色影响比较明显</p> <pre><code class=language-javascript>var geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个立方体几何对象Geometry\nvar material = new THREE.MeshLambertMaterial({\n  color: 0xffffff,\n}); //材质对象Material\nvar mesh = new THREE.Mesh(geometry, material); //网格模型对象Mesh\nscene.add(mesh); //网格模型添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603875225x1033347913.png alt=""></p> <h5 id=intensity>intensity</h5> <pre><code class=language-javascript>var ambient = new THREE.AmbientLight(0xff0000, 0.6);</code></pre> <p>intensity 默认值为 1；</p> <p>光照效果设置为 0.6，明显比上一个效果暗许多</p> <p><img src=http://chuantu.xyz/t6/741/1603875266x1033347913.png alt=""></p> <h3 id=点光源><a href=https://threejs.org/docs/index.html#api/zh/lights/PointLight>点光源</a></h3> <p>从一个点向各个方向发射的光源。一个常见的例子是模拟一个灯泡发出的光。</p> <pre><code class=language-javascript>/**\n * 光源设置\n */\n//点光源\nvar point = new THREE.PointLight(0xffffff);\npoint.position.set(400, 200, 300); //点光源位置\n// 通过add方法插入场景中，不插入的话，渲染的时候不会获取光源的信息进行光照计算\nscene.add(point); //点光源添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603875359x1033347913.png alt=""></p> <h5 id=位置>位置</h5> <p>点光源位置可以调整，调整光照角度</p> <pre><code class=language-javascript>let btn = document.getElementById(&quot;btn&quot;);\nif (btn) {\n  btn.onclick = function() {\n    setInterval(() =&gt; {\n      let y = point.position.y;\n      point.position.setY(y - 10);\n    }, 100);\n  };\n}</code></pre> <p>下面可以看一下光源运动后对模型产生的影响； 为了方便观看，添加一个<a href=https://threejs.org/docs/index.html#api/zh/helpers/PointLightHelper>点光源的辅助对象</a></p> <pre><code class=language-javascript>var sphereSize = 10; // 辅助对象尺寸\nvar pointLightHelper = new THREE.PointLightHelper(point, sphereSize);\nscene.add(pointLightHelper);</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603875429x1033347913.gif alt=""></p> <h5 id=颜色>颜色</h5> <p>和环境光一样，点光源也可以通过调整颜色，改变场景中物体的颜色</p> <p><code>point.color = new THREE.Color(0xff0000)</code></p> <p><img src=http://chuantu.xyz/t6/741/1603875473x1033347913.png alt=""></p> <h5 id=强度>强度</h5> <p><code>point.intensity = 5</code></p> <p><img src=http://chuantu.xyz/t6/741/1603875508x1033347913.png alt=""></p> <p><code>point.intensity = 0.5</code></p> <p><img src=http://chuantu.xyz/t6/741/1603875541x1700338641.png alt=""></p> <h3 id=平行光><a href=https://threejs.org/docs/index.html#api/zh/lights/DirectionalLight>平行光</a></h3> <p>平行光是沿着特定方向发射的光。这种光的表现像是无限远,从它发出的光线都是平行的。常常用平行光来模拟太阳光 的效果; 太阳足够远，因此我们可以认为太阳的位置是无限远，所以我们认为从太阳发出的光线也都是平行的。</p> <pre><code class=language-javascript>var directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\nscene.add(directionalLight);</code></pre> <p>关于平行光对象，位置、颜色、光照强度，与其他光源 api 基本相同， 主要看一下光源跟踪</p> <h5 id=光源跟踪-target>光源跟踪 target</h5> <p>平行光的方向是从它的位置到目标位置。默认的目标位置为原点 (0,0,0)。</p> <p><img src=http://chuantu.xyz/t6/741/1603875572x1700338641.gif alt=""></p> <pre><code class=language-javascript>/**\n * 光源设置\n */\n// 平行光\nvar directionalLight = new THREE.DirectionalLight(0xffffff, 1);\nlet v3 = new THREE.Vector3(120, 120, -100);\ndirectionalLight.position.copy(v3);\nscene.add(directionalLight);\n\nvar helper = new THREE.DirectionalLightHelper(directionalLight, 5);\nscene.add(helper);\n\nlet btn = document.getElementById(&quot;btn&quot;);\nif (btn) {\n  btn.onclick = function() {\n    setInterval(() =&gt; {\n      let y = directionalLight.position.y;\n      directionalLight.position.setY(y - 5);\n      helper.update();\n    }, 100);\n  };\n}</code></pre> <p>设置 target 之后，光源可以从 light.position 照射到 light.target.position</p> <p>light.target 必须要添加到 scene 中</p> <pre><code class=language-javascript>/**\n * 光源设置\n */\n// 平行光\nvar directionalLight = new THREE.DirectionalLight(0xffffff, 1);\nlet v3 = new THREE.Vector3(120, 120, -100);\ndirectionalLight.position.copy(v3);\nscene.add(directionalLight);\n\nvar helper = new THREE.DirectionalLightHelper(directionalLight, 5);\nscene.add(helper);\n\nvar geometry = new THREE.BoxGeometry(10, 10, 10); //创建一个立方体几何对象Geometry\nvar material = new THREE.MeshLambertMaterial({\n  color: 0xff0000,\n}); //材质对象Material\nvar mesh = new THREE.Mesh(geometry, material); //网格模型对象Mesh\n\n// directionalLight.position.set(120, 120, -100);\nlet v3n = v3.negate();\nmesh.position.copy(v3n);\ndirectionalLight.target = mesh;\nscene.add(directionalLight.target);\n\nlet btn = document.getElementById(&quot;btn&quot;);\nif (btn) {\n  btn.onclick = function() {\n    setInterval(() =&gt; {\n      let y = directionalLight.target.position.y;\n      directionalLight.target.position.setY(y - 5);\n      helper.update();\n    }, 100);\n  };\n}</code></pre> <p>这样设置，灯光就可以一直跟踪 directionalLight.target 进行照射，而不是一个只有旋转分量的&#39;自由平行光&#39;</p> <p><img src=http://chuantu.xyz/t6/741/1603875739x1700338641.gif alt=""></p> <p>通过这样的调整，我们可以做很多效果，比如日出日落等</p> <p>其他光源可以在以后学习中继续探索</p> ';e.exports=n},1894:function(e,t){var n='<html> <p class=name style=display:none>网格材质对象</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605705290x1700338641.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1587888451835</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1587888951548</p> </html> <html> <p class=brief style=display:none>对于一个成熟的3D模型来说，只有框架是远远不够的，要想展示出绚丽的3d效果，材质是必不可少的要素之一，比如模型是否可以受光照的影响，决定模型是否透明等等。` </p> </html> <h3 id=网格材质对象>网格材质对象</h3> <p>对于一个成熟的3D模型来说，只有框架是远远不够的，要想展示出绚丽的3d效果，材质是必不可少的要素之一，比如模型是否可以受光照的影响，决定模型是否透明等等。</p> <h5 id=材质对象对比>材质对象对比</h5> <pre><code class=language-javascript> /**\n   * 创建网格模型\n   */\n  var geometry = new THREE.SphereGeometry(35, 32, 32); // 球几何体\n  // var geometry = new THREE.BoxGeometry( 70, 70, 70 );  创建一个立方体几何对象Geometry\n  // var geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 ); 创建一个扭曲几何对象Geometry\n\n  //基础网格材质对象   不受光照影响  没有棱角感\n  var BasicMaterial = new THREE.MeshBasicMaterial({\n    color: 0x0000ff,\n    // wireframe:true,//线条模式渲染\n  });\n\n  // 与光照计算  漫反射   产生棱角感\n  var LambertMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00ff00,\n  });\n\n  // 与光照计算  高光效果（镜面反射）    产生棱角感\n  var PhongMaterial = new THREE.MeshPhongMaterial({\n    color: 0xff0000,\n    specular: 0xffffff,\n    shininess: 10,\n  });\n\n  // 深度基于相机远近平面。白色最近，黑色最远。\n  var DepthMaterial = new THREE.MeshDepthMaterial({\n    color: 0xff0000,\n  });\n\n  var mesh1 = new THREE.Mesh(geometry, BasicMaterial); //网格模型对象Mesh\n  mesh1.position.setX(-80);\n  scene.add(mesh1); //网格模型添加到场景中\n  var mesh2 = new THREE.Mesh(geometry, LambertMaterial); //网格模型对象Mesh\n  scene.add(mesh2); //网格模型添加到场景中\n  var mesh3 = new THREE.Mesh(geometry, PhongMaterial); //网格模型对象Mesh\n  mesh3.position.setX(80);\n  scene.add(mesh3); //网格模型添加到场景中\n  var mesh4 = new THREE.Mesh(geometry, DepthMaterial); //网格模型对象Mesh\n  mesh4.position.setX(160);\n  scene.add(mesh4); //网格模型添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605705290x1700338641.png alt=""></p> <p>以上材质基类为<a href=https://threejs.org/docs/index.html#api/zh/materials/Material>Material</a></p> <h3 id=透明度--线条模式>透明度 &amp; 线条模式</h3> <h5 id=线条模式>线条模式</h5> <pre><code class=language-javascript>//基础网格材质对象   不受光照影响  没有棱角感\n  var BasicMaterial = new THREE.MeshBasicMaterial({\n    color: 0x0000ff,\n    wireframe: true, //线条模式渲染\n  });</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605705321x1031866013.png alt=""></p> <h5 id=半透明度>半透明度</h5> <pre><code class=language-javascript> // 与光照计算  漫反射   产生棱角感\n  var LambertMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00ff00,\n    transparent: true, //开启透明度\n    opacity: 0.8, //设置透明度具体值\n  });</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605705353x1033347913.png alt=""></p> <p>.transparent : Boolean</p> <p>定义此材质是否透明。这对渲染有影响，因为透明对象需要特殊处理，并在非透明对象之后渲染。 设置为true时，通过设置材质的opacity属性来控制材质透明的程度。 默认值为false。</p> <p>.opacity : Float</p> <p>在0.0 - 1.0的范围内的浮点数，表明材质的透明度。值0.0表示完全透明，1.0表示完全不透明。 如果材质的transparent属性未设置为true，则材质将保持完全不透明，此值仅影响其颜色。 默认值为1.0。</p> <p>材质对象还有很多类型，在以后的学习中继续探索...</p> ';e.exports=n},"190e":function(e,t,n){"use strict";n("7db0"),n("c975"),n("fb6a"),n("a9e3"),n("d3b7"),n("ac1f"),n("1276"),n("ddb0");var o=n("d4ec"),l=n("bee2"),a=n("ade3"),r=n("bc3a"),s=n.n(r),i=function(){function e(){Object(o["a"])(this,e),Object(a["a"])(this,"fileList",[]),Object(a["a"])(this,"filenameList",[]),Object(a["a"])(this,"tag",""),Object(a["a"])(this,"callback",null)}return Object(l["a"])(e,[{key:"init",value:function(e){if(this.fileList=[],this.callback=e,this.filenameList=n("04a9").keys(),0!==this.filenameList.length)for(var t=0;t<this.filenameList.length;t++){var o=this.filenameList[t],l=o.slice(2);this.getFile(l,t===this.filenameList.length-1)}}},{key:"getFile",value:function(e,t){var n=this;s.a.get("md/".concat(e)).then((function(o){var l,a=document.createElement("div");a.innerHTML=o.data,l={name:a.getElementsByClassName("name")[0].innerHTML||"",tag:a.getElementsByClassName("tag")[0].innerHTML||"",author:a.getElementsByClassName("author")[0].innerHTML||"",date:a.getElementsByClassName("date")[0].innerHTML||"",reprint:a.getElementsByClassName("reprint")[0].innerHTML||"",brief:a.getElementsByClassName("brief")[0].innerHTML||"",coverPng:a.getElementsByClassName("coverPic")[0].innerHTML||"",case:a.getElementsByClassName("case")[0].innerHTML||"",id:a.getElementsByClassName("id")[0].innerHTML||"",fileName:e},n.fileList.push(l),n.fileList.sort((function(e,t){return Number(t.date)-Number(e.date)})),n.callback&&t&&n.callback(n.fileList)}))}},{key:"getArticleByTag",value:function(e){var t=[];return e?this.fileList.find((function(n){var o=n.tag.split("|");-1!==o.indexOf(e)&&t.push(n)})):t=this.fileList,t}},{key:"getArticleById",value:function(e){var t=null;return this.fileList.find((function(n){n.id===e&&(t=n)})),t}}]),e}();t["a"]=i},"1a96":function(e,t){var n="<html> <p class=name style=display:none>前端面试题总结</p> </html> <html> <p class=tag style=display:none>笔记|原创</p> </html> <html> <p class=coverPic style=display:none>https://s2.ax1x.com/2019/11/18/Mc1m7j.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1570636800000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1570636800000</p> </html> <html> <p class=brief style=display:none>面试题总结，不断更新</p> </html> <blockquote> <p>1、给数组添加一个方法，返回数组最大值</p> </blockquote> <pre><code class=language-javascript>//  将方法挂载到数组原型\nArray.prototype.getTopOne = function(){\n    var arr = this,\n        max = arr[0] //假设最大值为数组第一位\n    for(var i = 0; i&lt;arr.length; i++){\n        if(arr[i]&gt;max){   //将数组每一项与假设的最大值相比，最大值赋值给max\n            max = arr[i]    \n        }\n    }\n    return max  //返回最大数\n}\nvar arr = [1,2,3,4,5,6,7,8,9]\nconsole.log(arr.getTopOne()) //9</code></pre> <blockquote> <p>2、给数组添加一个方法，返回数组第二大值，为保证代码性能，只是用一次循环</p> </blockquote> <pre><code class=language-javascript>Array.prototype.getTopTow = function(){\n    var arr = this,\n        max = arr[0], //假设最大值为数组第一位\n        secondMax = arr[1], //假设第二大的值为数组第二位\n        err;\n    for(var i = 0; i&lt;arr.length; i++){  \n        // if(arr[i]&gt;max){   //将数组每一项与假设的最大值相比，最大值赋值给max\n        //     max = arr[i]\n        // }\n        var num = arr[i]\n        if(num.constructor!==Number){\n            err = &#39;请输入正确数字&#39;\n            return err\n        }\n        if(num &gt; max){   //过滤最大值\n            secondMax = max   //之前假设的最大值给第二大值\n            max = num        //设置最大值\n        }else {\n            if(num &gt; secondMax){     //过滤第二大值\n                secondMax = num  \n            }\n        }\n    }\n    return secondMax\n}\nvar arr = [1,2,3,4,5,6,7,8,9]\nconsole.log(arr.getTopTow())</code></pre> <blockquote> <p>3、将下面的字符串转成驼峰命名法，尽量使用正则</p> </blockquote> <pre><code class=language-javascript>const string = &#39;get-element-by-id&#39;</code></pre> <pre><code class=language-javascript>Object.prototype.stringToCamelCase = function(){\n    var reg = /-(\\w)/g;\n    return this.replace(reg, function (a, b) {\n        return b.toUpperCase();\n    });\n}\nconsole.log(string.stringToCamelCase())\n</code></pre> <blockquote> <p>4、用css绘制一个三角形和一个直角梯形</p> </blockquote> <pre><code class=language-html>&lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;trapezoid&quot;&gt;&lt;/div&gt;</code></pre> <pre><code class=language-css>div{\n    display:inline-block;\n  }\n  /* 三角形*/\n  .triangle {\n        width: 50px;\n        height: 50px;\n        border-width: 50px 50px 50px 0;\n        border-color: #fff #f0f #fff #fff;\n        border-style: solid;\n        box-sizing: border-box;\n  }\n\n  /* 直角梯形*/\n  .trapezoid {\n        width: 50px;\n        height: 50px;\n        border-width: 50px 50px 50px 0;\n        border-color: #fff #fff #f0f #fff;\n        border-style: solid;\n  }</code></pre> <blockquote> <p>5、如何判断一个变量的类型</p> </blockquote> <pre><code class=language-javascript>typeof(1) //&quot;number&quot;\ntypeof(&#39;&#39;) //&quot;string&quot;\ntypeof(true) //&quot;boolean&quot;\ntypeof(undefined) //&quot;undefined&quot;\ntypeof([]) //&quot;object&quot;\ntypeof({}) //&quot;object&quot;\ntypeof(null) //&quot;object&quot;\ntypeof(fun)  //&quot;function&quot;</code></pre> <pre><code class=language-javascript>var num = 1\nnum.constructor===Number  //true\nvar boln = true\nboln.constructor===Boolean  //true\nvar str = &#39;&#39;\nstr.constructor===String   //true\nvar arr = []\narr.constructor===Array  //true\nvar obj = {}\nobj.constructor===Object  //true\nvar fun = function(){}\nfun.constructor===Function  //true\n</code></pre> <pre><code class=language-javascript>var n = null,\nu = undefined\n!n  //true\n!u   //true</code></pre> <pre><code class=language-javascript>Array.prototype.isPrototypeOf([])  //true</code></pre> ";e.exports=n},"1faa":function(e,t){var n='<html> <p class=name style=display:none>css高频面试题，你真的会么</p> </html> <html> <p class=tag style=display:none>笔记|转载</p> </html> <html> <p class=coverPic style=display:none>https://s2.ax1x.com/2019/11/25/MjZ9pV.jpg</p> </html> <html> <p class=reprint style=display:none>https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651557445&idx=2&sn=f6ac345977b8b808f7645ef51ba75640&chksm=80255984b752d092c6c2dcb59768315b61cbe050a70e8e69f1b02974a8e6c3c6d93b396b985a&mpshare=1&scene=1&srcid=&sharer_sharetime=1574653337665&sharer_shareid=32954446058125c84bb3e436e94fdbdd&key=5da921f6a859f0b100f9a691d38b3b60747e807e3f0952db7bb4631639536c5bb349c98589191722be9f8c608e65fcd3e49b7a3021eb1191a3ce22b4e017ea9813cd523fc886fba79bde6a1caddd5fa9&ascene=1&uin=OTYyMzQxNzI0&devicetype=Windows+10&version=62070152&lang=zh_CN&pass_ticket=jIyh1PzF%2By3e2ZN5dcem7jYan3kj%2BDliRWAjqvenvBQWEys6wJFP5LSBwvHQI8GR</p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>小小张</p> </html> <html> <p class=date style=display:none>1574654339000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1574654339000</p> </html> <html> <p class=brief style=display:none>css高频面试题，你真的会么...</p> </html> <h3 id=1什么是-bfc机制><strong>1.什么是 BFC机制</strong></h3> <p>BFC(Block Formatting Context)，<strong>块级格式化上下文</strong>，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。</p> <p><img src=https://s2.ax1x.com/2019/11/25/MjZtht.jpg alt=MjZtht.jpg></p> <ul> <li><p>触发条件 (以下任意一条)</p> </li> <li><ul> <li>float的值不为none</li> <li>overflow的值不为visible</li> <li>display的值为table-cell、tabble-caption和inline-block之一</li> <li>position的值不为static或则releative中的任何一个</li> </ul> </li> </ul> <blockquote> <p>在IE下, Layout,可通过<code>zoom:1</code> 触发</p> </blockquote> <ul> <li>BFC布局与普通文档流布局区别:</li> </ul> <p> BFC布局规则:</p> <ol> <li><p>浮动的元素会被父级计算高度(父级元素触发了BFC)</p> </li> <li><p>非浮动元素不会覆盖浮动元素的位置(非浮动元素触发了BFC)</p> </li> <li><p>margin不会传递给父级(父级触发BFC)</p> </li> <li><p>属于同一个BFC的两个相邻元素上下margin会重叠</p> </li> <li><p>普通文档流布局: 浮动的元素是不会被父级计算高度</p> </li> <li><p>非浮动元素会覆盖浮动元素的位置</p> </li> <li><p>margin会传递给父级元素</p> </li> <li><p>两个相邻元素上下的margin会重叠</p> </li> </ol> <ul> <li><p>开发中的应用</p> </li> <li><ul> <li>阻止margin重叠</li> <li>可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个 div都位于同一个 BFC 区域之中)</li> <li>自适应两栏布局</li> <li>可以阻止元素被浮动元素覆盖</li> </ul> </li> <li><h3 id=2-css3中新增的选择器以及属性><strong>2. CSS3中新增的选择器以及属性</strong></h3> </li> <li><p>这里只是列出来, 具体的使用,请查看我的关于css3新增选择器与属性文章</p> </li> <li><p>属性选择器</p> </li> <li><table> <thead> <tr> <th align=left>属性选择器</th> <th align=left>含义描述</th> </tr> </thead> <tbody><tr> <td align=left>E[att^=&quot;val&quot;]</td> <td align=left>属性att的值以&quot;val&quot;<strong>开头</strong>的元素</td> </tr> <tr> <td align=left>E[att$=&quot;val&quot;]</td> <td align=left>属性att的值以&quot;val&quot;<strong>结尾</strong>的元素</td> </tr> <tr> <td align=left>E[att*=&quot;val&quot;]</td> <td align=left>属性att的值<strong>包含</strong>&quot;val&quot;字符串的元素</td> </tr> </tbody></table> </li> <li><ul> <li>结构伪类选择器</li> </ul> </li> <li><table> <thead> <tr> <th align=left>选择器</th> <th align=left>含义描述</th> </tr> </thead> <tbody><tr> <td align=left>E:root</td> <td align=left>匹配文档的<strong>根元素</strong>，对于HTML文档，就是HTML元素</td> </tr> <tr> <td align=left>E:nth-child(n)</td> <td align=left>匹配其<strong>父元素的第n个子元素</strong>，第一个编号为1</td> </tr> <tr> <td align=left>E:nth-last-child(n)</td> <td align=left>匹配其父元素的<strong>倒数第n个子元素</strong>，第一个编号为1</td> </tr> <tr> <td align=left>E:nth-of-type(n)</td> <td align=left>与:nth-child()作用类似，但是仅匹配使用同种标签的元素</td> </tr> <tr> <td align=left>E:nth-last-of-type(n)</td> <td align=left>与:nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td> </tr> <tr> <td align=left>E:last-child</td> <td align=left>匹配父元素的最后一个子元素，等同于:nth-last-child(1)</td> </tr> <tr> <td align=left>E:first-of-type</td> <td align=left>匹配父元素下使用同种标签的第一个子元素，等同于:nth-of-type(1)</td> </tr> <tr> <td align=left>E:last-of-type</td> <td align=left>匹配父元素下使用同种标签的最后一个子元素，等同于:nth-last-of-type(1)</td> </tr> <tr> <td align=left>E:only-child</td> <td align=left>匹配父元素下仅有的一个子元素，等同于:first-child:last-child或 :nth-child(1):nth-last-child(1)</td> </tr> <tr> <td align=left>E:only-of-type</td> <td align=left>匹配父元素下使用同种标签的唯一一个子元素，等同于:first-of-type:last-of-type或 :nth-of-type(1):nth-last-of-type(1)</td> </tr> <tr> <td align=left>E:empty</td> <td align=left>匹配一个不包含任何子元素的元素，注意，文本节点也被看作子元素</td> </tr> </tbody></table> </li> <li><ul> <li>css3新增属性</li> </ul> </li> <li><table> <thead> <tr> <th align=left>属性</th> <th align=left>含义描述</th> <th align=left>兼容</th> </tr> </thead> <tbody><tr> <td align=left>transition</td> <td align=left>设置过渡效果</td> <td align=left></td> </tr> <tr> <td align=left>transform</td> <td align=left>变换效果(移动、缩放、转动、拉长或拉伸)</td> <td align=left></td> </tr> <tr> <td align=left>animation</td> <td align=left>动画效果</td> <td align=left></td> </tr> <tr> <td align=left>box-shadow</td> <td align=left>阴影效果</td> <td align=left>FF3.5, Safari 4, Chrome 3</td> </tr> <tr> <td align=left>text-shadow</td> <td align=left>文本阴影</td> <td align=left>FF 3.5, Opera 10, Safari 4, Chrome 3</td> </tr> <tr> <td align=left>border-colors</td> <td align=left>为边框设置多种颜色</td> <td align=left>FF3+</td> </tr> <tr> <td align=left>boder-image</td> <td align=left>图片边框</td> <td align=left>FF 3.5, Safari 4, Chrome 3</td> </tr> <tr> <td align=left>text-overflow</td> <td align=left>文本截断</td> <td align=left>IE6+, Safari4, Chrome3, Opera10</td> </tr> <tr> <td align=left>word-wrap</td> <td align=left>自动换行</td> <td align=left>IE6+, FF 3.5, Safari 4, Chrome 3</td> </tr> <tr> <td align=left>border-radius</td> <td align=left>圆角边框</td> <td align=left>FF 3+, Safari 4 , Chrome 3</td> </tr> <tr> <td align=left>opacity</td> <td align=left>不透明度</td> <td align=left>all</td> </tr> <tr> <td align=left>box-sizing</td> <td align=left>控制盒模型的组成模式</td> <td align=left>FF3+, Opera 10, Safari 4, Chrome 3</td> </tr> <tr> <td align=left>outline</td> <td align=left>外边框</td> <td align=left>FF3+, safari 4, chrome 3, opera 10</td> </tr> <tr> <td align=left>background-size</td> <td align=left>不指定背景图片的尺寸</td> <td align=left>safari 4, chrome 3, opera 10</td> </tr> <tr> <td align=left>background-origin</td> <td align=left>指定背景图片从哪里开始显示</td> <td align=left>safari 4, chrome 3, FF 3+</td> </tr> <tr> <td align=left>background-clip</td> <td align=left>指定背景图片从什么位置开始裁切</td> <td align=left>safari 4, chrome 3</td> </tr> <tr> <td align=left>rgba</td> <td align=left>基于r,g,b三个颜色通道来设置颜色值, 通过a来设置透明度</td> <td align=left>safari 4, chrome 3, FF3, opera 10</td> </tr> </tbody></table> </li> <li><h3 id=3-居中布局><strong>3. 居中布局</strong></h3> </li> <li><ul> <li>水平居中</li> </ul> </li> <li><ol> <li>行内元素: <code>text-align:center</code></li> <li>块级元素: <code>margin:0 auto</code></li> <li>绝对定位和移动: <code>absolute + transform</code></li> <li>绝对定位和负边距: <code>absolute + margin</code></li> <li>flex布局: <code>flex + justify-content:center</code></li> </ol> </li> <li><p>垂直居中</p> </li> <li><ol> <li>子元素为单行文本: <code>line-height:height</code></li> <li><code>absolute + transform</code></li> <li><code>flex + align-items:center</code></li> <li>table: <code>display:table-cell; vertical-align: middle</code></li> <li>利用position和top和负margin</li> </ol> </li> <li><p>水平垂直居中<img src=https://s2.ax1x.com/2019/11/25/MjZyAs.png alt=img></p> </li> </ul> <ul> <li><p>\\1. 已知元素宽高:绝对定位+margin:auto:</p> </li> <li><p><code>div{width: 200px;height: 200px;background: green;position:absolute;left:0;top: 0;bottom: 0;right: 0;margin: auto; }</code></p> </li> <li></li> <li><p>\\2. 已知元素宽高: 绝对定位+负margin</p> </li> <li><p><code>div{width: 200px;height: 200px;background: green;position:absolute;left:0;top: 0;bottom: 0;right: 0;margin: auto; }</code></p> </li> <li></li> <li><p>\\3. absolute+transform</p> </li> <li><p><code>div{width: 200px;height: 200px;background: green;position:absolute;left:50%; /* 定位父级的50% */top:50%;transform: translate(-50%,-50%); /*自己的50% */ }</code></p> </li> <li></li> <li></li> <li><p><code>4.flex + justify-content + align-items</code></p> </li> <li><p><code>.box{height:600px;display:flex;justify-content:center; //子元素水平居中align-items:center; //子元素垂直居中/* aa只要三句话就可以实现不定宽高水平垂直居中。*/ }.box&gt;div{background: green;width: 200px;height: 200px; }</code></p> </li> <li><h3 id=4-清除浮动有哪些方法-各有什么优缺点><strong>4. 清除浮动有哪些方法, 各有什么优缺点</strong></h3> </li> <li><ul> <li>使用clear属性的空元素 在浮动元素后使用一个空元素如<code>，并在CSS中赋予```.clear{clear:both;}```属性即可清理浮动。亦可使用``` ```或</code>来进行清理。</li> </ul> </li> <li><blockquote> <p>优点: 简单, 写少量代码, 兼容性也好 缺点: 添加无语义html元素, 不利于代码语义化, 后期维护成本大</p> </blockquote> </li> <li><ul> <li>使用css的overflow属性 给浮动元素的容器添加<code>overflow:hidden;</code>或<code>overflow:auto;</code>可以清除浮动，另外在 IE6 中还需要触发 hasLayout ，例如为父元素设置容器宽高或设置<code>zoom:1</code>。在添加overflow属性后，浮动元素又回到了容器层，把容器高度撑起，达到了清理浮动的效果。</li> </ul> </li> <li><blockquote> <p>优点: 简单, 代码少, 浏览器支持好 缺点: 不能和position配合使用, 因为超出的尺寸会被隐藏<code>overflow:hidden</code></p> </blockquote> </li> <li><ul> <li>使用CSS的:after伪元素 结合 :after 伪元素（注意这不是伪类，而是伪元素，代表一个元素之后最近的元素）和 IEhack ，可以完美兼容当前主流的各大浏览器，这里的 IEhack 指的是触发 hasLayout。给浮动元素的容器添加一个 <code>clearfix</code> 的class，然后给这个class添加一个:after伪元素实现元素末尾添加一个看不见的块元素（Block element）清理浮动。通过CSS伪元素在容器的内部元素最后添加了一个看不见的空格&quot;020&quot;或点&quot;.&quot;，并且赋予clear属性来清除浮动。需要注意的是为了IE6和IE7浏览器，要给clearfix这个class添加一条zoom:1;触发haslayout。</li> </ul> </li> <li><blockquote> <p>优点: 浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等） 缺点: 代码多，要两句代码结合使用，才能让主流浏览器都支持</p> </blockquote> </li> <li><ul> <li>给父级元素设置高度</li> </ul> </li> <li><blockquote> <p>简单, 代码少,好掌握 缺点: 只适用于高度固定的布局</p> </blockquote> </li> <li><h3 id=5-用纯css创建一个三角形的原理是什么><strong>5. 用纯CSS创建一个三角形的原理是什么</strong></h3> </li> <li><p>之前写三角形, 都是直接记住代码,没有探究原因,我也是直到有一次面试时,面试大哥让我说说css创建三角形的原理,我就......回来就赶紧翻资料.接下来我就将当时我理解的过程列举出来:</p> </li> <li><p>\\1. 写一个我们最熟悉的 border应用</p> </li> <li><p><code>.box{width:100px;height:100px;border: 3px solid;border-color:#1b93fb #1bfb24 #efad48 #ef4848;}</code></p> </li> <li><p>效果如下:<img src=https://s2.ax1x.com/2019/11/25/MjZ6Nn.png alt=img></p> </li> <li><p>\\2. 接下来,我们将border值增大</p> </li> </ul> <pre><code class=language-css>.box{width:100px;\n    height:100px;\n    border: 50px solid;\n    border-color:#1b93fb #1bfb24 #efad48 #ef4848;\n}</code></pre> <ul> <li><p><img src=https://s2.ax1x.com/2019/11/25/MjZ290.png alt=img>很容易发现, border渲染并不是正方形, 而是梯形的.</p> </li> <li></li> <li><p>\\3. 在增大border的基础下, 此时我们将盒子宽高变成0,会产生什么效果呢!</p> </li> <li><p><code>.box{width:0px;height:0px;border: 50px solid;border-color:#1b93fb #1bfb24 #efad48 #ef4848;}</code></p> </li> <li><p><img src=https://s2.ax1x.com/2019/11/25/MjZWcT.png alt=img>四个三角形拼合成的矩形呈现在我们眼前,那如如果我们只想要一个三角形, 我们是不是可以设想将其他三个设为不可见;</p> </li> <li></li> <li><p>\\4. 设置透明, 隐藏其中三个三角形</p> </li> <li><p><code>.box{width:0px;height:0px;border: 50px solid;border-color:transparent transparent transparent #ef4848;}</code></p> </li> <li><p><img src=https://s2.ax1x.com/2019/11/25/MjZ4uF.png alt=img>三角形这样就出来, 有木有很简单, 当然我们也可以采用逆向思维来写这个效果, 就是先将所有边框设为透明, 然后需要哪边再对其设置颜色, 效果是一样的</p> </li> <li><p><code>.box{width:0px;height:0px;border: 50px solid transparent;border-left:50px solid #ef4848;}</code></p> </li> <li><p><img src=https://s2.ax1x.com/2019/11/25/MjZH41.png alt=img></p> </li> <li><blockquote> <p>这样给面试你的人讲,讲明白应该不是问题., 重点就是要理解<strong>border</strong>的应用</p> </blockquote> </li> <li><h3 id=""></h3> </li> <li><h3 id=6-实现三栏布局有哪些方法-分别描述一下><strong>6. 实现三栏布局有哪些方法, 分别描述一下</strong></h3> </li> <li><p>三栏布局，顾名思义就是两边固定，中间自适应。三栏布局在开发十分常见，那么什么是三栏布局？即左右模块固定宽度，中间模块随浏览器变化自适应，想要完成的最终效果如下图所示：<img src=https://s2.ax1x.com/2019/11/25/MjZL36.md.png alt=img>下面列出四种实现方式, 在开发中可以根据实际需求选择适合自己的方法进行编码:</p> </li> <li></li> <li><ul> <li>Flex 布局</li> </ul> </li> <li><blockquote> <p>简单实用，现在比较流行的方案，但是需要考虑浏览器的兼容性。</p> </blockquote> </li> <li></li> <li><ul> <li>绝对定位布局</li> </ul> </li> <li><blockquote> <p>这种方案也简单实用, 并且可以将 ``````元素放到第一位,使得主要内容优先加载!</p> </blockquote> </li> <li></li> <li><ul> <li>双飞翼布局</li> </ul> </li> <li></li> <li></li> <li><ul> <li>圣杯布局</li> </ul> </li> <li><blockquote> <p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。</p> </blockquote> </li> <li><h3 id=-1></h3> </li> <li><h3 id=7-css3实现05px的细线><strong>7. css3实现0.5px的细线</strong></h3> </li> <li><h3 id=-2></h3> </li> <li><h3 id=8-link-与-import-的区别><strong>8. link 与 @import 的区别</strong></h3> </li> <li><ol> <li>从属关系区别</li> </ol> </li> <li><blockquote> <p>@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等</p> </blockquote> </li> <li><ol> <li>加载顺序区别</li> </ol> </li> <li><blockquote> <p>加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。</p> </blockquote> </li> <li><ol> <li>兼容性区别</li> </ol> </li> <li><blockquote> <p>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</p> </blockquote> </li> <li><ol> <li>DOM可控性区别</li> </ol> </li> <li><blockquote> <p>可以通过 JS 操作 DOM ，插入link标签来改变样式；由于DOM方法是基于文档的，无法使用@import的方式插入样式。</p> </blockquote> </li> <li><p>css部分就整理到这里, 小伙伴们面试还有什么经常遇到的,可以在评论区给我留言, 我有时间就整理出来, IT(挨踢)都是一大家, 方便你我他</p> </li> <li><h3 id=9-开发中为什么要初始化css样式><strong>9. 开发中为什么要初始化css样式</strong></h3> </li> <li><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p> </li> <li><h3 id=10-css优化、提高性能的方法有哪些><strong>10. CSS优化、提高性能的方法有哪些</strong></h3> </li> <li><ul> <li>尽量将样式写在单独的css文件里面，在head元素中引用 将代码写成单独的css文件有几点好处：</li> </ul> </li> <li><ol> <li>内容和样式分离，易于管理和维护</li> <li>减少页面体积</li> <li>css文件可以被缓存、重用，维护成本降低</li> </ol> </li> <li><p>不使用@import</p> </li> <li><p>避免使用复杂的选择器，层级越少越好 建议选择器的嵌套最好不要超过三层，比如：</p> </li> <li><p>精简页面的样式文件，去掉不用的样式</p> </li> <li><p>利用CSS继承减少代码量</p> </li> <li><p>避免！important，可以选择其他选择器</p> </li> </ul> ';e.exports=n},"20e8":function(e,t){var n='<html> <p class=name style=display:none>css选择器练习·动态五星好评</p> </html> <html> <p class=tag style=display:none>前端|原创</p> </html> <html> <p class=coverPic style=display:none>https://s2.ax1x.com/2019/11/13/MGZaoF.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none>五星好评.html</p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1497327029000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1497327029000</p> </html> <html> <p class=brief style=display:none>css基础：主要使用伪类选择器和input单选框的点击状态实现可选择的五星好评</p> </html> <blockquote> <p>成品图样</p> </blockquote> <p><img src=https://s2.ax1x.com/2019/11/13/MGZkRA.gif alt=image></p> <blockquote> <p>html代码</p> </blockquote> <pre><code>&lt;div class=&quot;box&quot;&gt;\n    &lt;input type=&quot;radio&quot; id=&quot;one&quot; name=&quot;check&quot;&gt;\n    &lt;label for=&quot;one&quot;&gt;\n        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;56.5px&quot; height=&quot;53.5px&quot;&gt;\n            &lt;path /&gt;\n        &lt;/svg&gt;\n    &lt;/label&gt;\n    &lt;input type=&quot;radio&quot; id=&quot;two&quot; name=&quot;check&quot;&gt;\n    &lt;label for=&quot;two&quot;&gt;\n        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;56.5px&quot; height=&quot;53.5px&quot;&gt;\n            &lt;path /&gt;\n        &lt;/svg&gt;\n    &lt;/label&gt;\n    &lt;input type=&quot;radio&quot; id=&quot;three&quot; name=&quot;check&quot;&gt;\n    &lt;label for=&quot;three&quot;&gt;\n        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;56.5px&quot; height=&quot;53.5px&quot;&gt;\n            &lt;path /&gt;\n        &lt;/svg&gt;\n    &lt;/label&gt;\n    &lt;input type=&quot;radio&quot; id=&quot;four&quot; name=&quot;check&quot;&gt;\n    &lt;label for=&quot;four&quot;&gt;\n        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;56.5px&quot; height=&quot;53.5px&quot;&gt;\n            &lt;path /&gt;\n        &lt;/svg&gt;\n    &lt;/label&gt;\n    &lt;input type=&quot;radio&quot; id=&quot;five&quot; name=&quot;check&quot; checked&gt;\n    &lt;label for=&quot;five&quot;&gt;\n        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;56.5px&quot; height=&quot;53.5px&quot;&gt;\n            &lt;path /&gt;\n        &lt;/svg&gt;\n    &lt;/label&gt;\n&lt;/div&gt;\n</code></pre><p>name属性为相同单选框只选择一个，checked为默认选择状态，基础css原理利用css各种伪类选择器：~ &gt; + :checked []</p> <blockquote> <p>&#39;~&#39; 为选择节点后面所有的兄弟节点</p> </blockquote> <pre><code>&lt;ul&gt;\n    &lt;li class=&quot;first&quot;&gt;第一行&lt;/li&gt;\n    &lt;li&gt;第二行&lt;/li&gt;\n    &lt;li&gt;第三行&lt;/li&gt;\n    &lt;li&gt;第四行&lt;/li&gt;\n    &lt;li&gt;第五行&lt;/li&gt;\n    &lt;li&gt;第六行&lt;/li&gt;\n&lt;/ul&gt;</code></pre><pre><code>.first~li{\n    color:#f0f;\n}\n\n</code></pre><p><img src=https://s2.ax1x.com/2019/11/13/MGu076.png alt=image></p> <blockquote> <p>&#39;&gt;&#39; 当前节点所有子节点( 不包含孙子节点 )</p> </blockquote> <pre><code>ul&gt;li{\n    color:#f0f;\n}</code></pre><p><img src=https://s2.ax1x.com/2019/11/13/MGuo4S.png alt=image></p> <blockquote> <p>&#39;+&#39; 选择当前节点的下一个兄弟节点</p> </blockquote> <pre><code>.first + li{\n  color:#0f0\n}</code></pre><p><img src=https://s2.ax1x.com/2019/11/13/MGKiv9.png alt=image></p> <blockquote> <p>:checked [] 前者input选中效果，后者属性选择器，在接下来的代码中有体现</p> </blockquote> <pre><code>&lt;style&gt;\n    /* 父元素，因为~符号只能匹配下面的兄弟节点，所以使用弹性盒的倒序改变五角星的排列方式 */\n    .box{\n        width:320px;\n        height:60px;\n        margin:0 auto;\n        display:flex;\n        flex-direction: row-reverse;\n        justify-content: space-between;\n    }\n    /* 隐藏单选 */\n    input{\n        display:none;\n    }\n    /* 五角星默认样式 */\n    input[type=&quot;radio&quot;]+label&gt;svg&gt;path{\n        d: path(&quot;M27.500,1.501 L36.069,16.899 L53.497,20.217 L41.365,33.051 L43.567,50.499 L27.500,43.032 L11.433,50.499 L13.635,33.051 L1.503,20.217 L18.931,16.899 L27.500,1.501 &quot;);\n        stroke-width:1px;\n        fill:none;\n        stroke:#333;\n    }\n    /* 移入，点击选中的元素和下面的元素变为实心 */\n    input[type=&quot;radio&quot;]+label:hover&gt;svg&gt;path,\n    input[type=&quot;radio&quot;]+label:hover~input[type=&quot;radio&quot;]+label&gt;svg&gt;path,\n    input[type=&quot;radio&quot;]:checked+label&gt;svg&gt;path,\n    input[type=&quot;radio&quot;]:checked~input[type=&quot;radio&quot;]+label&gt;svg&gt;path{\n        stroke-width:0px;\n        fill:#f00;\n    }\n&lt;/style&gt;</code></pre><h3 id=""></h3> <h3 id=-1></h3> <h3 id=-2></h3> <blockquote> <p>演示案例</p> </blockquote> ';e.exports=n},"439c":function(e,t){var n='<html> <p class=name style=display:none>Typescript 的数据类型</p> </html> <html> <p class=tag style=display:none>前端|原创</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605668666x-1224475230.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1604020127000</p> </html> <html> <p class=id style=display:none>1604020127000</p> </html> <html> <p class=brief style=display:none>Typescript是一种由微软开发的、开源的编程语言，自2012年10月发布首个公开版以来，它已得到了人们的广泛认可</p> </html> <h4 id=typescript-的数据类型>Typescript 的数据类型</h4> <ol> <li>布尔类型 boolean</li> <li>数字类型 number</li> <li>字符串类型 string</li> <li>数组类型 array</li> <li>元组类型 tuple （属于数组的一种）</li> <li>枚举类型 enum</li> <li>任意类型 any </li> <li>null 和 undefined never的子类型</li> <li>void 类型 表示没有类型</li> <li>never 不存在值的类型</li> </ol> <h4 id=类型的应用>类型的应用</h4> <h5 id=布尔类型>布尔类型</h5> <pre><code class=language-typescript>// 未规定类型\nlet bool\nbool = false\nbool = 1  \nconsole.log(bool) // 1xxxxxxxxxx let bool = true// bool = &#39;&#39;  // 不能将类型“string”分配给类型“boolean”bool = false// 未规定类型let boolbool = falsebool = 1  console.log(bool) // 1typescript</code></pre> <pre><code class=language-typescript>//  定义的时候默认赋值布尔值\nlet bool = true\nbool = 1 // 不能将类型“number”分配给类型“boolean”。\nconsole.log(bool) // 编译不通过</code></pre> <p>这段代码片段相当于规定了 <code>bool:boolean</code></p> <pre><code class=language-typescript> let bool: boolean\n bool = false\n bool = true\n console.log(bool) //true</code></pre> <h4 id=""></h4> <h5 id=数字类型>数字类型</h5> <pre><code class=language-typescript> let num:number\n\n num = 0\n\n console.log(num)  // 0</code></pre> <h5 id=字符串类型>字符串类型</h5> <pre><code class=language-typescript> let str: string\n str = &#39;&#39;\n str = &#39;is a string&#39;\n\n console.log(str) // is a string</code></pre> <h5 id=数组类型>数组类型</h5> <p>定义数组的时候需要规定数组内每一项的数据类型</p> <p>未规定数组内每一项的数据类型</p> <pre><code class=language-typescript>let arr: [] = []\n\narr.push(1)  // 类型“number”的参数不能赋给类型“never”的参数</code></pre> <p>定义数组时规定数组内每一项数据类型</p> <p>规定数组内每一项的数据类型</p> <pre><code class=language-typescript>// 未规定数组内每一项的数据类型\nlet arr: string[] = []\n\narr.push(&#39;123&#39;)  // 类型“number”的参数不能赋给类型“never”的参数\n\n// 在规定数组内每一项的数据类型之后再push其他数据类型\narr.push(1) // 类型“number”的参数不能赋给类型“string”的参数。\n</code></pre> <p>如果需要数组内有不同的数据类型可以使用元组类型</p> <h5 id=元组类型>元组类型</h5> <pre><code class=language-typescript>let arr:[number, string] = [] \n//不能将类型“[]”分配给类型“[number, string]”。\n//源具有 0 个元素，但目标需要 2 个。\n\n// 元组类型规定数据类型的数据源数量需要跟定义的数量一样\nlet arr:[number, string] = [1,&#39;1&#39;]</code></pre> <p>数组定义元祖类型后，只能添加规定的数据类型</p> <pre><code class=language-typescript>// 元组类型规定数据类型的数据源数量需要跟定义的数量一样\nlet arr:[number, string] = [1,&#39;1&#39;]\narr.unshift(&#39;0&#39;)\narr.push(2)\narr.push(&#39;2&#39;)\nconsole.log(arr)  // [&quot;0&quot;, 1, &quot;1&quot;, 2, &quot;2&quot;]</code></pre> <h5 id=枚举类型>枚举类型</h5> <pre><code>\nenum Color { blue, red, yellow }\nconsole.log(Color)\n/**\n 打印结果\n    {\n        0: &quot;blue&quot;\n        1: &quot;red&quot;\n        2: &quot;yellow&quot;\n        blue: 0\n        red: 1\n        yellow: 2\n    }\n */</code></pre><p>对Color取值</p> <pre><code class=language-typescript>\nenum Color { blue, red, yellow }\nconsole.log(Color)\n/**\n 打印结果\n    {\n        0: &quot;blue&quot;\n        1: &quot;red&quot;\n        2: &quot;yellow&quot;\n        blue: 0\n        red: 1\n        yellow: 2\n    }\n */\n\n let c:Color = Color.blue\n console.log(c) // 0</code></pre> <p>修改下标</p> <pre><code class=language-typescript>enum Color { blue, red = 3, yellow }\nlet c: Color = Color.yellow\nconsole.log(c) // 4 (修改后的下标)\n</code></pre> <h5 id=任意类型>任意类型</h5> <p>任意类型any定义后可以对变量进行任意赋值</p> <pre><code class=language-typescript> let a:any = null\n a = 1\n console.log(a)  // 1</code></pre> <h5 id="null和undefined">null和undefined</h5> <p>对于需要明确表明不可用的情况，null和undefined都不建议</p> <p>规定其他类型但不为其赋值</p> <pre><code class=language-typescript>var num:number\nconsole.log(num) // 编译报错：在赋值前使用了变量“num”  打印undefined</code></pre> <p>规定格式为undefined，将不能再赋值其他数据类型</p> <pre><code class=language-typescript>let num:undefined\nconsole.log(num)  // undefined\nnum = 1  // 不能将类型“1”分配给类型“undefined”\n\nlet str:undefined\nnum = str  // 编译正常\nconsole.log(num) // undefined\n</code></pre> <p>对于不确定变量规定undefined</p> <pre><code class=language-typescript>var foo = { x: 123, y: undefined }\nconsole.log(foo)\nfoo = {  // 类型 &quot;{ x: number; }&quot; 中缺少属性 &quot;y&quot;，但类型 &quot;{ x: number; y: undefined; }&quot; 中需要该属性。\n  x: 456\n}\n\n// 可选变量\nlet foo: {x: number, y?: number | undefined | null} = {x: 1}</code></pre> <h5 id=void类型>void类型</h5> <p>规定函数没有返回值</p> <pre><code class=language-typescript>function fun(l: number): void {\n  console.log(l) // 10\n}\nconst l: number = 10\nfun(l)</code></pre> <p>规定函数具有规范类型的返回值</p> <pre><code class=language-typescript>function fun(x: number, y: number): number {\n  return x + y\n}\n\nconst x = 2\nconst y = 3\nconst sum = fun(x,y)\nconsole.log(sum) // 5</code></pre> <h5 id=never>never</h5> <blockquote> <p>程序语言的设计确实应该存在一个底部类型的概念，当你在分析代码流时，这回是一个理所当然存在的类型。typescript就是这样一种分析代码流的语言，因此他需要个可靠的类型来代表哪些永远不会发生的事情。</p> <p>never类型就是Typescript中的底部类型，它自然被分配的一些例子如下</p> <ul> <li>一个从来不会有返回值的函数，例如，如果函数内含有 <code>while(true){}</code> 的话。</li> <li>一个总会抛出错误的函数，如 <code>function foo () {throw new Error(&#39;Not Implemented&#39;)}</code> ，foo的返回类型就是never</li> </ul> </blockquote> <pre><code class=language-typescript>var a:never\na = (()=&gt;{\n  return &#39;&#39; // 不能将类型“string”分配给类型“never”。\n})()</code></pre> <p>可以使用 <code>throw **new** *Error*(&#39;错误&#39;)</code> 捕捉错误</p> <pre><code class=language-typescript>var a:never\na = (()=&gt;{\n  // return &#39;&#39; // 不能将类型“string”分配给类型“never”。\n  throw new Error(&#39;错误&#39;)\n})()</code></pre> <p>index.js:114 Uncaught Error: 错误</p> <p>实际操作的案例</p> <pre><code class=language-typescript>function foo(x: string | number): boolean {\n  if (typeof x === &#39;string&#39;) {\n    return true\n  } else if (typeof x === &#39;number&#39;) {\n    return false\n  }\n  // 如果不是never类型的，则会报错(函数缺少结束 return 语句，返回类型不包括)\n  // 并非在所有条件下都有返回值（严格的空检查）\n}</code></pre> <p>正确的操作方法</p> <pre><code class=language-typescript>function fail (message: string): never {\n  throw new Error(message)\n}\n\n\nfunction foo(x: string | number): boolean {\n  if (typeof x === &#39;string&#39;) {\n    return true\n  } else if (typeof x === &#39;number&#39;) {\n    return false\n  }\n  // 如果不是never类型的，则会报错(函数缺少结束 return 语句，返回类型不包括)\n  // 并非在所有条件下都有返回值（严格的空检查）\n\n  return fail(&#39;Unexhaustive&#39;)\n}\n\nlet f = foo(&#39;123&#39;)\nconsole.log(f) // true\n</code></pre> <p>如果将 if语句中的return都去掉，控制台将报错 </p> <pre><code class=language-typescript>\nfunction fail (message: string): never {\n  throw new Error(message)\n}\n\n\nfunction foo(x: string | number): boolean {\n  if (typeof x === &#39;string&#39;) {\n    // return true\n  } else if (typeof x === &#39;number&#39;) {\n    // return false\n  }\n  // 如果不是never类型的，则会报错(函数缺少结束 return 语句，返回类型不包括)\n  // 并非在所有条件下都有返回值（严格的空检查）\n\n  return fail(&#39;Unexhaustive&#39;)\n}\n\nlet f = foo(&#39;123&#39;)\nconsole.log(f) // Uncaught Error: Unexhaustive\n</code></pre> <h5 id=字面量类型>字面量类型</h5> <p><code>字面量是javascript本身提供的一个准确变量</code></p> <p>可以将一个字符串字面量作为一个类型来使用</p> <pre><code class=language-typescript>\n// 创建一个foo变量，字面量值为Hello的变量\nlet foo: &#39;Hello&#39;\n\n/* foo = &#39;bar&#39;  // 不能将类型“&quot;bar&quot;”分配给类型“&quot;Hello&quot;” */\n/* 它们本身并不是很实用，但是可以在一个联合类型中组合创建一个强大且实用的抽象概念*/\n\ntype CarDirection = &#39;Top&#39; | &#39;Bottom&#39; | &#39;Left&#39; | &#39;Right&#39;\n\nfunction move(offset: number, direction: CarDirection){\n  // Do something...\n}\n\nmove(1, &#39;Top&#39;)  // 正确\nmove(1, &#39;center&#39;) // 错误 类型“&quot;center&quot;”的参数不能赋给类型“CarDirection”的参数。</code></pre> ';e.exports=n},4678:function(e,t,n){var o={"./af":"2bfb","./af.js":"2bfb","./ar":"8e73","./ar-dz":"a356","./ar-dz.js":"a356","./ar-kw":"423e","./ar-kw.js":"423e","./ar-ly":"1cfd","./ar-ly.js":"1cfd","./ar-ma":"0a84","./ar-ma.js":"0a84","./ar-sa":"8230","./ar-sa.js":"8230","./ar-tn":"6d83","./ar-tn.js":"6d83","./ar.js":"8e73","./az":"485c","./az.js":"485c","./be":"1fc1","./be.js":"1fc1","./bg":"84aa","./bg.js":"84aa","./bm":"a7fa","./bm.js":"a7fa","./bn":"9043","./bn.js":"9043","./bo":"d26a","./bo.js":"d26a","./br":"6887","./br.js":"6887","./bs":"2554","./bs.js":"2554","./ca":"d716","./ca.js":"d716","./cs":"3c0d","./cs.js":"3c0d","./cv":"03ec","./cv.js":"03ec","./cy":"9797","./cy.js":"9797","./da":"0f14","./da.js":"0f14","./de":"b469","./de-at":"b3eb","./de-at.js":"b3eb","./de-ch":"bb71","./de-ch.js":"bb71","./de.js":"b469","./dv":"598a","./dv.js":"598a","./el":"8d47","./el.js":"8d47","./en-au":"0e6b","./en-au.js":"0e6b","./en-ca":"3886","./en-ca.js":"3886","./en-gb":"39a6","./en-gb.js":"39a6","./en-ie":"e1d3","./en-ie.js":"e1d3","./en-il":"7333","./en-il.js":"7333","./en-in":"ec2e","./en-in.js":"ec2e","./en-nz":"6f50","./en-nz.js":"6f50","./en-sg":"b7e9","./en-sg.js":"b7e9","./eo":"65db","./eo.js":"65db","./es":"898b","./es-do":"0a3c","./es-do.js":"0a3c","./es-us":"55c9","./es-us.js":"55c9","./es.js":"898b","./et":"ec18","./et.js":"ec18","./eu":"0ff2","./eu.js":"0ff2","./fa":"8df4","./fa.js":"8df4","./fi":"81e9","./fi.js":"81e9","./fil":"d69a","./fil.js":"d69a","./fo":"0721","./fo.js":"0721","./fr":"9f26","./fr-ca":"d9f8","./fr-ca.js":"d9f8","./fr-ch":"0e49","./fr-ch.js":"0e49","./fr.js":"9f26","./fy":"7118","./fy.js":"7118","./ga":"5120","./ga.js":"5120","./gd":"f6b4","./gd.js":"f6b4","./gl":"8840","./gl.js":"8840","./gom-deva":"aaf2","./gom-deva.js":"aaf2","./gom-latn":"0caa","./gom-latn.js":"0caa","./gu":"e0c5","./gu.js":"e0c5","./he":"c7aa","./he.js":"c7aa","./hi":"dc4d","./hi.js":"dc4d","./hr":"4ba9","./hr.js":"4ba9","./hu":"5b14","./hu.js":"5b14","./hy-am":"d6b6","./hy-am.js":"d6b6","./id":"5038","./id.js":"5038","./is":"0558","./is.js":"0558","./it":"6e98","./it-ch":"6f12","./it-ch.js":"6f12","./it.js":"6e98","./ja":"079e","./ja.js":"079e","./jv":"b540","./jv.js":"b540","./ka":"201b","./ka.js":"201b","./kk":"6d79","./kk.js":"6d79","./km":"e81d","./km.js":"e81d","./kn":"3e92","./kn.js":"3e92","./ko":"22f8","./ko.js":"22f8","./ku":"2421","./ku.js":"2421","./ky":"9609","./ky.js":"9609","./lb":"440c","./lb.js":"440c","./lo":"b29d","./lo.js":"b29d","./lt":"26f9","./lt.js":"26f9","./lv":"b97c","./lv.js":"b97c","./me":"293c","./me.js":"293c","./mi":"688b","./mi.js":"688b","./mk":"6909","./mk.js":"6909","./ml":"02fb","./ml.js":"02fb","./mn":"958b","./mn.js":"958b","./mr":"39bd","./mr.js":"39bd","./ms":"ebe4","./ms-my":"6403","./ms-my.js":"6403","./ms.js":"ebe4","./mt":"1b45","./mt.js":"1b45","./my":"8689","./my.js":"8689","./nb":"6ce3","./nb.js":"6ce3","./ne":"3a39","./ne.js":"3a39","./nl":"facd","./nl-be":"db29","./nl-be.js":"db29","./nl.js":"facd","./nn":"b84c","./nn.js":"b84c","./oc-lnc":"167b","./oc-lnc.js":"167b","./pa-in":"f3ff","./pa-in.js":"f3ff","./pl":"8d57","./pl.js":"8d57","./pt":"f260","./pt-br":"d2d4","./pt-br.js":"d2d4","./pt.js":"f260","./ro":"972c","./ro.js":"972c","./ru":"957c","./ru.js":"957c","./sd":"6784","./sd.js":"6784","./se":"ffff","./se.js":"ffff","./si":"eda5","./si.js":"eda5","./sk":"7be6","./sk.js":"7be6","./sl":"8155","./sl.js":"8155","./sq":"c8f3","./sq.js":"c8f3","./sr":"cf1e","./sr-cyrl":"13e9","./sr-cyrl.js":"13e9","./sr.js":"cf1e","./ss":"52bd","./ss.js":"52bd","./sv":"5fbd","./sv.js":"5fbd","./sw":"74dc","./sw.js":"74dc","./ta":"3de5","./ta.js":"3de5","./te":"5cbb","./te.js":"5cbb","./tet":"576c","./tet.js":"576c","./tg":"3b1b","./tg.js":"3b1b","./th":"10e8","./th.js":"10e8","./tk":"5aff","./tk.js":"5aff","./tl-ph":"0f38","./tl-ph.js":"0f38","./tlh":"cf75","./tlh.js":"cf75","./tr":"0e81","./tr.js":"0e81","./tzl":"cf51","./tzl.js":"cf51","./tzm":"c109","./tzm-latn":"b53d","./tzm-latn.js":"b53d","./tzm.js":"c109","./ug-cn":"6117","./ug-cn.js":"6117","./uk":"ada2","./uk.js":"ada2","./ur":"5294","./ur.js":"5294","./uz":"2e8c","./uz-latn":"010e","./uz-latn.js":"010e","./uz.js":"2e8c","./vi":"2921","./vi.js":"2921","./x-pseudo":"fd7e","./x-pseudo.js":"fd7e","./yo":"7f33","./yo.js":"7f33","./zh-cn":"5c3a","./zh-cn.js":"5c3a","./zh-hk":"49ab","./zh-hk.js":"49ab","./zh-mo":"3a6c","./zh-mo.js":"3a6c","./zh-tw":"90ea","./zh-tw.js":"90ea"};function l(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}l.keys=function(){return Object.keys(o)},l.resolve=a,e.exports=l,l.id="4678"},"4b19":function(e,t,n){},"56d7":function(e,t,n){"use strict";n.r(t);n("e260"),n("e6cf"),n("cca6"),n("a79d");var o=n("2b0e"),l=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"app"}},[n("transition",{attrs:{name:"loading"}},[e.showLoading?n("Loading"):e._e()],1),n("nav-bar",{directives:[{name:"show",rawName:"v-show",value:-1===e.noNav.indexOf(e.$route.path),expression:"noNav.indexOf($route.path)===-1"}]}),n("keep-alive",{attrs:{include:e.keepList}},[n("router-view")],1)],1)},a=[],r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"nav"},[n("ul",e._l(e.navList,(function(t){return n("li",{directives:[{name:"show",rawName:"v-show",value:t.path!==e.$route.path,expression:"nav.path !== $route.path"}],key:t.id,staticClass:"nav-li skewX",class:e.getNavdeepstyle?"nav-deep":"nav-light",on:{click:function(n){return e.toRoute(t.path)}}},[n("div",{staticClass:"nav-item"},[n("div",{staticClass:"nav-text",domProps:{textContent:e._s(t.name)}})])])})),0)])},s=[],i={data:function(){return{navStyle:"light",navList:[{path:"/articlelist",name:"文章分类",id:"1"},{path:"/demo",name:"前端案例",id:"2"},{path:"/gamemaze",name:"迷宫游戏",id:"3"},{path:"/market",name:"商场模型",id:"4"}]}},methods:{toRoute:function(e){this.$router.push(e)}},computed:{getNavdeepstyle:function(){return this.$store.getters["navdeepstyle"]}}},p=i,c=(n("b2b7"),n("2877")),d=Object(c["a"])(p,r,s,!1,null,"27299dca",null),h=d.exports,u={name:"App",components:{navBar:h},data:function(){return{showLoading:!1,keepList:["art-list"],noNav:["/articledetail","/market","/gamemaze","/error","/iframe"]}},mounted:function(){document.onreadystatechange=function(){document.readyState}},computed:{getLoading:function(){return this.$store.getters["loading"]}},watch:{getLoading:function(e){this.showLoading=e}}},g=u,m=Object(c["a"])(g,l,a,!1,null,null,null),f=m.exports,y=(n("d3b7"),n("8c4f")),b=n("d4ec"),v=n("bee2"),x=n("ade3"),q=n("2f62"),E={loading:null,navdeepstyle:!1},w={loading:function(e){return e.loading},navdeepstyle:function(e){return e.navdeepstyle}},j={loading:function(e,t){var n=e.commit;n("loading",t)},navdeepstyle:function(e,t){var n=e.commit;n("navdeepstyle",t)}},k={loading:function(e,t){e.loading=t},navdeepstyle:function(e,t){e.navdeepstyle=t}},T={state:E,getters:w,actions:j,mutations:k};o["a"].use(q["a"]);var L=new q["a"].Store({modules:{evidence:T}});function M(){return/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)?(console.log("是移动端"),!0):(console.log("非移动端"),!1)}var H=function(){function e(t){Object(b["a"])(this,e),Object(x["a"])(this,"router",null),this.router=t,this.each()}return Object(v["a"])(e,[{key:"each",value:function(){this.router.beforeEach((function(e,t,n){e.meta.deep?L.dispatch("navdeepstyle",!0):L.dispatch("navdeepstyle",!1),"/gamemaze"===e.path&&(M()?n("/error"):n()),n()}))}}]),e}(),z=function(){return n.e("chunk-5bc0c3a4").then(n.bind(null,"a411"))},R=function(){return n.e("chunk-7f31fee3").then(n.bind(null,"c30d"))},C=function(){return n.e("chunk-2d6b4cec").then(n.bind(null,"33ca"))},S=function(){return n.e("chunk-75a1af8b").then(n.bind(null,"041e"))},D=function(){return n.e("chunk-4be458be").then(n.bind(null,"753d"))},B=function(){return n.e("chunk-1bd67462").then(n.bind(null,"6ede"))},F=function(){return n.e("chunk-3c9debc4").then(n.bind(null,"fd98"))},P=function(){return n.e("chunk-0bb7c892").then(n.bind(null,"4fc4"))};o["a"].use(y["a"]);var O=new y["a"]({routes:[{path:"/",name:"articlelist",redirect:"/articlelist",meta:{deep:!1},component:z},{path:"/demo",name:"demo",component:B},{path:"/articlelist",name:"articlelist",meta:{deep:!0},component:R},{path:"/articledetail",name:"articledetail",meta:{deep:!1},component:C},{path:"/market",name:"market",meta:{deep:!1},component:S},{path:"/gamemaze",name:"gamemaze",meta:{deep:!1},component:D},{path:"/iframe",name:"iframe",meta:{deep:!1},component:F},{path:"/error",name:"error",component:P},{path:"*",redirect:"/articlelist"}]});new H(O);var A=O,G=n("bc3a"),I=n.n(G),N=n("b2d8"),_=n.n(N),U=(n("64e1"),function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)}),Z=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"loading"},[n("div",{staticClass:"out-line"},[n("div",{staticClass:"inner-line"})])])}],$={name:"name"},V=$,W=(n("759d"),Object(c["a"])(V,U,Z,!1,null,"66b592b4",null)),Y=W.exports;o["a"].component("Loading",Y);n("b44f"),n("77fc"),n("6f84");var J=n("190e"),K=n("c1df"),Q=n.n(K),X=function(){function e(){Object(b["a"])(this,e)}return Object(v["a"])(e,[{key:"close",value:function(){L.dispatch("loading",!1)}},{key:"open",value:function(){L.dispatch("loading",!0)}}]),e}(),ee={install:function(e){e.mixin({created:function(){this.flwz="分类文章"}}),e.prototype.$loading=new X,e.prototype.$moment=function(){return Q.a},e.prototype.$formatDate=function(e){return Q()(e).format("YYYY / MM / DD")},e.prototype.$readFile=new J["a"]}};o["a"].config.productionTip=!1,o["a"].use(ee),o["a"].use(_.a),o["a"].prototype.$axios=I.a,new o["a"]({store:L,router:A,render:function(e){return e(f)}}).$mount("#app")},6046:function(e,t){var n='<html> <p class=name style=display:none>记 · 双十一，城西银泰薅羊毛</p> </html> <html> <p class=tag style=display:none>小记</p> </html> <html> <p class=coverPic style=display:none>https://s2.ax1x.com/2019/11/12/M10Rr8.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1573536813000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1573536813000</p> </html> <html> <p class=brief style=display:none>这是嘟嘟小姐来杭州的第二个周末，周六公司团建，忙了一天也累了一天，回家做做饭，吃吃饭，倒头便昏昏睡去 周末本来要去小镇的一些不知名景点，又因为需要到临平取咸鱼上淘的二手桌子，景点去不成，又无事可做，提议逛逛街，于是制定路线去城西银泰溜达溜达。 </p> </html> <h4 id=小记>小记</h4> <p>这是嘟嘟小姐来杭州的第二个周末，周六孙先生公司团建，忙了一天也累了一天，回家做做饭，吃吃饭，倒头便昏昏睡去 周末本来要去小镇的一些不知名景点，又因为需要到临平取咸鱼上淘的二手桌子，景点去不成，又无事可做，提议逛逛街，于是制定路线去城西银泰溜达溜达。</p> <h3 id=""></h3> <h3 id=-1></h3> <blockquote> <p>准备</p> </blockquote> <p>上午十点，嘟嘟小姐洗过头，坐在床头柜前，准备梳妆打扮，钢铁直男孙先生来说，完全不懂一堆瓶瓶罐罐都意味着什么，但孙先生对厨房还是很熟悉的，突然看到一盒不知其作用的化妆品（后经过嘟嘟小姐指点为粉扑），</p> <p>“面粉么？”</p> <p>毫无疑问，回答孙先生的是嘟嘟小姐的白眼</p> <p>......</p> <img src=https://s2.ax1x.com/2019/11/13/MGl3r9.png alt=image style=zoom:50%;width:50% /> <h3 id=-2></h3> <h3 id=-3></h3> <blockquote> <p>出发</p> </blockquote> <p>十一点半，锁上出租屋的小门，美美的出门，到了城西银泰，果然是大城市，找停车位找了好久，路痴的孙先生和嘟嘟小姐，为了逛完能够找到车位，特意拍了车位的照片，这个习惯养成了好久；</p> <p>那年嘟嘟小姐的同学来大连玩儿，带同学去柏威年，出来时找了将近半个小时车位。</p> <p><img src=https://s2.ax1x.com/2019/11/13/MG5r9I.jpg alt=image></p> <h3 id=-4></h3> <h3 id=-5></h3> <blockquote> <p>逛</p> </blockquote> <p>因为是购物节，又赶上周末，商场人格外多，嘟嘟小姐一路感慨：南方小姑娘真秀气；</p> <p>商场双十一搞活动，定时抽红包，下午一点有一场，时间还早，到商场十二点多一点；</p> <p>扫了二维码，授权，登录，人脸识别，就等时间一到，开始抢红包（希望不是一分两分之类的），大城市的商场不至于扣扣搜搜的</p> <p>随便逛了逛，孙先生试了一双鞋子，想不通，Nike和FILA在BF和F4都有店，打折方式不一样，而且款式大多不同，因为其他店并没有关注，所以不知道其他店是不是也有多家；</p> <p>嘟嘟小姐好像对自己的衣服不是很感兴趣，倒是对“打扮”孙先生比较来劲；</p> <img src=https://s2.ax1x.com/2019/11/13/MGorOf.jpg alt=image style=zoom:50%;width:50% /> <h3 id=-6></h3> <h3 id=-7></h3> <blockquote> <p>抢红包</p> </blockquote> <p>抢红包的过程...；</p> <p>果然是大城市，红包够大，嘟嘟小姐抢了111元红包，蹦起来乐，智齿呼之欲出，果然，爱笑的女生运气不会差，然鹅...爱笑的男生运气也不会差，孙先生抢了11.11元的红包，虽然运气不及嘟嘟小姐；红包指定商家 才可以使用，基本上门口摆放双十一海报的就都是参加活动的店铺，在甜之盐门口拍下了参与活动门店列表的照片 研究了一会 除了几个卖小吃的，大多为服装店，一百的红包，无最低消费，也就是说红包可以无门槛使用，但只能使用一次不设找零，说多不多，几经商讨，嘟嘟小姐和孙先生决定去《名创优品》薅羊毛，商品种类繁多，单价相对小一些，这样可以买到很多零碎的小玩意儿；</p> <img src=https://s2.ax1x.com/2019/11/13/MGqWQA.jpg alt=image style=zoom:50%;width:50% /> <h3 id=-8></h3> <h3 id=-9></h3> <blockquote> <p>薅羊毛</p> </blockquote> <p>孙先生没买到心仪的毛绒玩偶，不开心了几秒，视线转移到了拼图上，毛绒玩偶抛之脑后，嘟嘟小姐取下来一套豆豆粉碎器，其实就是一根很粗的针，模样嘛...像是容嬷嬷用过的； 啊~ 原来容嬷嬷是在帮紫薇祛痘哦...</p> <p>去《名创优品》 是明智的选择，果然买了很多种类的，都是能安排合理岗位的商品，比如，袜子<del>，香薰</del>，钥匙链~，湿纸巾，以及容嬷嬷的针</p> <img src=https://s2.ax1x.com/2019/11/13/MGOUD1.jpg alt=image style=zoom:50%;width:33% /> <h3 id=-10></h3> <h3 id=-11></h3> <blockquote> <p>吃</p> </blockquote> <p>羊毛薅干净了，一百多的商品，嘟嘟小姐明显很开心，开心就会想到吃东西，又到了BF层，找到了嘟嘟小姐最爱吃的——猪蹄，味道不错，对得起价格，Q弹，入味儿，很容易拆骨</p> <p> 这一趟，孙先生收获不小，试了斐乐和耐克的鞋，并且...拍了照片，已经在某宝加入了购物车，线上的双十一活动比线下优惠力度大，自然不能错过；</p> <p> 嘟嘟小姐收获也是不小，一堆小商品...</p> ';e.exports=n},"6f84":function(e,t,n){},"759d":function(e,t,n){"use strict";var o=n("7c12"),l=n.n(o);l.a},"77fc":function(e,t,n){},"7bef":function(e,t){var n='<html> <p class=name style=display:none>线</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605704661x1700338641.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1589284800000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1589284800000</p> </html> <html> <p class=brief style=display:none> </p> </html> <h3 id=通过网格模型创建线>通过网格模型创建线</h3> <pre><code class=language-javascript>var geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个立方体几何对象Geometry\n// 线条渲染模式\nvar material = new THREE.LineBasicMaterial({\n  color: 0xff0000, //线条颜色\n}); //材质对象\n// 创建线模型对象   构造函数：Line、LineLoop、LineSegments\nvar line = new THREE.Line(geometry, material); //线条模型对象\nscene.add(line); //线条对象添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704661x1700338641.png alt=""></p> <h3 id=通过设置顶点创建线>通过设置顶点创建线</h3> <pre><code class=language-javascript>var geometry = new THREE.Geometry(); //声明一个几何体对象Geometry\nvar p1 = new THREE.Vector3(100, 20, 0); //顶点1坐标\nvar p2 = new THREE.Vector3(0, 20, 0); //顶点2坐标\nvar p3 = new THREE.Vector3(100, 40, 0); //顶点3坐标\n//顶点坐标添加到geometry对象\ngeometry.vertices.push(p1, p2, p3);\n\nvar material = new THREE.LineBasicMaterial({\n  color: 0xffff00,\n}); //材质对象\n//线条模型对象\nvar line = new THREE.Line(geometry, material);\nscene.add(line); //线条对象添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704707x1031866013.png alt=""></p> <h5 id=彩色的线条>彩色的线条</h5> <pre><code class=language-javascript>/**\n * 创建网格模型\n */\nvar geometry = new THREE.BufferGeometry(); //声明一个缓冲几何体对象\n\n//类型数组创建顶点位置position数据\nvar vertices = new Float32Array([\n  100,\n  20,\n  0, //顶点1坐标\n  0,\n  20,\n  0, //顶点2坐标\n  100,\n  40,\n  0, //顶点3坐标\n]);\n// 创建属性缓冲区对象\nvar attribue = new THREE.BufferAttribute(vertices, 3); //3个为一组，作为一个顶点的xyz坐标\n// 设置几何体attributes属性的位置position属性\ngeometry.attributes.position = attribue;\n\n//类型数组创建顶点颜色color数据\nvar colors = new Float32Array([\n  1,\n  0,\n  0, //顶点1颜色\n  0,\n  1,\n  0, //顶点2颜色\n  0,\n  0,\n  1, //顶点3颜色\n]);\n// 设置几何体attributes属性的颜色color属性\ngeometry.attributes.color = new THREE.BufferAttribute(colors, 3); //3个为一组,表示一个顶点的颜色数据RGB\n\n//材质对象\nvar material = new THREE.LineBasicMaterial({\n  // 使用顶点颜色数据渲染模型，不需要再定义color属性\n  // color: 0xff0000,\n  vertexColors: THREE.VertexColors, //以顶点颜色为准\n});\n// 线条渲染模式  线模型对象Line\nvar line = new THREE.Line(geometry, material); //点模型对象\nscene.add(line); //点对象添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704766x1700338641.png alt=""></p> ';e.exports=n},"7c12":function(e,t,n){},"8e5d":function(e,t){var n="<html> <p class=name style=display:none>秒级加载大型3D模型</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>https://s2.ax1x.com/2019/12/05/Q82rjI.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1575475200000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1575475200000</p> </html> <html> <p class=brief style=display:none>前端使用threejs通过gltf格式以及IndexedDB缓存实现秒级加载大型3D模型</p> </html> <blockquote> <p>加载gltf文件</p> </blockquote> <p>obj转换gltf文件 需要用到 [obj2gltf]:<a href=https://github.com/AnalyticalGraphicsInc/obj2gltf>https://github.com/AnalyticalGraphicsInc/obj2gltf</a> 工具</p> <p>转换之前要确认自己的node环境是否正常</p> <p>下载以后 <code>npm install</code> 安装依赖包</p> <p>然后安装obj2gltf 安装包 <code>pm i -g obj2gltf</code></p> <p>要使用cmd 或者 powershell 试过git bash here 貌似不好用</p> <p>环境准备完毕，接下来就要转换 gltf 文件</p> <p><code>node bin/obj2gltf.js -i obj2gltf/gtx.obj -o obj2gltf/gtx.gltf</code></p> <p>-o 是指文件的输出 前面部分是obj文件路径 后部分是导出的文件路径</p> <p>indexeddb <a href=http://www.ruanyifeng.com/blog/2018/07/indexeddb.html>http://www.ruanyifeng.com/blog/2018/07/indexeddb.html</a> </p> <pre><code class=language-javascript>      // 直接调用\n      function getDbData(){\n        // 初始化\n        init(() =&gt; {\n          // 查询\n          read(&#39;gtx&#39;, loadSceneOk, getGlft, this);\n        });\n      }\n      function getGlft() {\n        console.log(&#39;缓存内没有，需要加载&#39;)\n        var time = new Date().getTime() / 1000;\n        var gltfloader = new THREE.GLTFLoader();\n        gltfloader.setDRACOLoader(new THREE.DRACOLoader());\n        gltfloader.load(\n          &quot;../OBJ/钢铁侠/ca.gltf&quot;,\n          function(gltf) {\n            let s = gltf.scene\n            var object = s;\n            scene.add(s)\n            save(&#39;gtx&#39;, s);\n          }\n        );\n      }\n      function loadSceneOk(res){\n        console.log(&#39;从缓存加载&#39;)\n        let load = new THREE.ObjectLoader();\n        let object = JSON.parse(res.scene);\n        let obj = load.parse(object);\n        scene.add(obj)\n      }</code></pre> <p>封装好的保存加载方法</p> <pre><code class=language-javascript>  var db = null\n  function init(callback) {\n    var request = window.indexedDB.open(&quot;scene&quot;);\n    request.onerror = error =&gt; {\n      console.error(&quot;打开数据库报错&quot;, error);\n      callback()\n    };\n    request.onsuccess = event =&gt; {\n      console.log(&quot;打开数据库成功&quot;);\n      db = request.result;\n      callback()\n    };\n    request.onupgradeneeded = event =&gt; {\n      db = event.target.result;\n      var objectStore;\n      if (!db.objectStoreNames.contains(&quot;scene&quot;)) {\n        objectStore = db.createObjectStore(&quot;scene&quot;, {\n          keyPath: &quot;name&quot;\n        }); // 主键自增\n      }\n    };\n  }\n\n  // onupgradeneeded(event)\n\n  function save(name, scene) {\n    console.log(&#39;准备保存&#39;)\n    let json = scene.toJSON();\n    let strScene = JSON.stringify(json);\n    let object = {\n      name: name,\n      scene: strScene\n    };\n    var request = db\n      .transaction([&quot;scene&quot;], &quot;readwrite&quot;)\n      .objectStore(&quot;scene&quot;)\n      .add(object);\n\n    request.onsuccess = event =&gt; {\n      console.log(&quot;数据写入成功&quot;);\n    };\n\n    request.onerror = event =&gt; {\n      console.error(&quot;数据写入失败&quot;, event);\n    };\n  }\n\n  function read(name,onback,errback,_this) {\n    var transaction = db.transaction([&quot;scene&quot;]);\n    var objectStore = transaction.objectStore(&quot;scene&quot;);\n    var request = objectStore.get(name);\n\n    request.onerror = event =&gt; {\n      console.log(&quot;事务失败&quot;);\n      errback(_this)\n    };\n\n    request.onsuccess = event =&gt; {\n      if (request.result) {\n        onback(request.result,_this)\n      } else {\n        console.log(&quot;未获得数据记录&quot;);\n        errback(_this)\n      }\n    };\n  }\n</code></pre> <p>ES6封装的方法 带删除多余库</p> ";e.exports=n},a92b:function(e,t){var n='<html> <p class=name style=display:none>轨道控制器</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605704830x1700338641.gif</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1587888000000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1587888000000</p> </html> <html> <p class=brief style=display:none>定义一个轨道控制器，要想使轨道控制器生效，必须循环渲染场景 `requestAnimationFrame` </p> </html> <p>threejs扩展控件 <a href=https://threejs.org/docs/index.html#examples/zh/controls/OrbitControls>OrbitControls.js</a></p> <p>可以使用鼠标对场景进行操作，比如旋转场景，移动场景，对场景进行缩放;</p> <pre><code class=language-javascript>var controls = new THREE.OrbitControls(camera, renderer.domElement);</code></pre> <p>定义一个轨道控制器，要想使轨道控制器生效，必须循环渲染场景 <code>requestAnimationFrame</code> </p> <pre><code class=language-javascript>var controls = new THREE.OrbitControls(camera, renderer.domElement);\n// 渲染函数\nfunction render() {\n  controls.update()\n  renderer.render(scene, camera); //执行渲染操作\n  requestAnimationFrame(render)\n}\nrender();</code></pre> <p>控制器提供几个方法</p> <ol> <li>addEventListener </li> <li>dispatchEvent</li> <li>hasEventListener</li> <li>removeEventListener</li> </ol> <h3 id=addeventlistener>addEventListener</h3> <p>监听方法，接受两个参数 <code>type</code>、<code>listener</code></p> <pre><code class=language-javascript>controls.addEventListener(&#39;change&#39;, changeControls)\n function changeControls(event) {\n  console.log(camera.position)\n}</code></pre> <p>轨道控制是用来控制相机，使相机进行轨道运动，所以可以在监听的函数中随时查看相机的位置信息</p> <h3 id=removeeventlistener>removeEventListener</h3> <p>用来移除监听事件</p> <pre><code class=language-javascript>controls.addEventListener(&#39;change&#39;, changeControls, false)\nfunction changeControls() {\n  console.log(event.type)\n}\nsetTimeout(()=&gt;{\n  controls.removeEventListener(&#39;change&#39;, changeControls)\n},5000)</code></pre> <p>监听的type除了change，还可以监听开始(star)时，和结束(end)时，具体可以看一下控制器的 <a href=https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js>源码</a></p> <pre><code class=language-javascript>var scope = this;\n\nvar changeEvent = { type: &#39;change&#39; };\nvar startEvent = { type: &#39;start&#39; };\nvar endEvent = { type: &#39;end&#39; };</code></pre> <p>也可以监听controls.document</p> <pre><code class=language-javascript>controls.domElement.addEventListener( &#39;mousedown&#39;, onMouseDown, false );\nfunction onMouseDown(){\n    console.log(event)\n}</code></pre> <p>其他两个平时没用到，源码中有应用到，是调用reset方法和update方法派发事件，还有待探索</p> <p><img src=http://chuantu.xyz/t6/741/1605704830x1700338641.gif alt=""></p> <p>从动图中可以看出，左键旋转和右键移动event.type都是mousemove，缩放event.type是wheel</p> <p>从打印出的日志可以看出来进行了什么操作，一会限制操作的时候会起到作用 <a href=https://threejs.org/examples/#misc_controls_orbit>官网案例</a> 官网提供了很多api，一起来看一看</p> <h3 id=autorotate>autoRotate</h3> <pre><code>.autoRotate : Boolean\n将其设为true，以自动围绕目标旋转。\n请注意，如果它被启用，你必须在你的动画循环里调用.update()。</code></pre><p>这个api主要是可以自动让场景进行旋转，可以控制旋转速度</p> <pre><code>.autoRotateSpeed : Float\n当 .autoRotate : Boolean为true时，围绕目标旋转的速度将有多快，默认值为2.0，相当于在60fps时每旋转一次需要30秒。\n请注意，如果 .autoRotate : Boolean被启用，你必须在你的动画循环里调用.update()。</code></pre><pre><code class=language-javascript>var controls = new THREE.OrbitControls(camera, renderer.domElement);\n// console.log(controls)\ncontrols.addEventListener(&#39;change&#39;, changeControls)\nfunction changeControls(event) {\n  console.log(event.type)\n}\n\ncontrols.autoRotate = true // 启用自动旋转\ncontrols.autoRotateSpeed = 10\n\n// 渲染函数\nfunction render() {\n  renderer.render(scene, camera); //执行渲染操作\n  controls.update()  //更新控制器\n  requestAnimationFrame(render)\n}\nrender();</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704860x1031866013.gif alt=""></p> <h3 id=阻尼惯性>阻尼惯性</h3> <h5 id=enabledamping>enableDamping</h5> <pre><code>将其设置为true以启用阻尼（惯性），这将给控制器带来重量感。默认值为false。\n请注意，如果该值被启用，你将必须在你的动画循环里调用.update()。</code></pre><h5 id=dampingfactor>dampingFactor</h5> <pre><code>当 .enableDamping : Boolean设置为true的时候，阻尼惯性有多大。</code></pre><p>请注意，要使得这一值生效，你必须在你的动画循环里调用.update()。 将其设置为true以启用阻尼（惯性），这将给控制器带来重量感。默认值为false。 请注意，如果该值被启用，你将必须在你的动画循环里调用.update()。</p> <pre><code class=language-javascript>controls.enableDamping = true\ncontrols.dampingFactor = 0.1</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704891x1033347913.gif alt=""></p> <p>略微有一点丝滑的感觉，鼠标旋转到一定角度松开后模型会继续“滑行”一段距离，控制台也是一直在打印</p> <h3 id=按键>按键</h3> <h5 id=enablekeys>enableKeys</h5> <p>启用或禁用键盘控制。</p> <pre><code class=language-javascript>    controls.enableKeys = true  // default true</code></pre> <h5 id=keys>keys:</h5> <p>这一对象包含了用于控制相机平移的按键代码的引用。默认值为4个箭头（方向）键。</p> <pre><code class=language-javascript>controls.keys = {\n  LEFT: 37, //left arrow\n  UP: 38, // up arrow\n  RIGHT: 39, // right arrow\n  BOTTOM: 40 // down arrow\n}</code></pre> <h5 id=keypanspeed>keyPanSpeed</h5> <p>当使用键盘按键的时候，相机平移的速度有多快。默认值为每次按下按键时平移7像素。</p> <pre><code class=language-javascript>controls.keyPanSpeed = 7</code></pre> <p>三者代码</p> <pre><code class=language-javascript>controls.addEventListener(&#39;change&#39;, changeControls)\nfunction changeControls() {\n  console.log(event.keyCode)\n}\n// controls.enableDamping = true\n// controls.dampingFactor = 0.1\n\ncontrols.enableKeys = true\ncontrols.keyPanSpeed = 7\ncontrols.keys = {\n  LEFT: 37, //left arrow\n  UP: 38, // up arrow\n  RIGHT: 39, // right arrow\n  BOTTOM: 40 // down arrow\n}</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704926x1700338641.gif alt=""></p> <p>有一个现象，在按下左箭头的时候，场景往右移动，本以为是哪里写错了， 反过来一想，轨道控制器是控制相机位置的，所以是相机向左边移动了7像素，场景自然向左边移动了</p> <h3 id=各种控制器禁用>各种控制器禁用</h3> <h5 id=enabled>enabled</h5> <p> 控制器是否被启用。</p> <h5 id=enablepan>enablePan</h5> <p>启用或禁用摄像机平移，默认为true。</p> <h5 id=enablerotate>enableRotate</h5> <p>启用或禁用摄像机水平或垂直旋转。默认值为true。 请注意，可以通过将polar angle或者azimuth angle 的min和max设置为相同的值来禁用单个轴， 这将使得水平旋转或垂直旋转固定为所设置的值。</p> <h5 id=enablezoom>enableZoom</h5> <p>启用或禁用摄像机的缩放。</p> <p>以上各种禁用 只改一下值就可以生效，不赘述</p> <h3 id=各种操作的角度限制>各种操作的角度限制</h3> <h5 id=旋转角度>旋转角度</h5> <pre><code>maxAzimuthAngle\n水平旋转的角度的上限\n\nminAzimuthAngle\n水平旋转的角度的下限\n\nminPolarAngle\n垂直旋转的角度的下限\n\nmaxPolarAngle\n垂直旋转的角度的上限</code></pre><p><img src=http://chuantu.xyz/t6/741/1605704958x1031866013.png alt=""></p> <h5 id=缩放限制>缩放限制</h5> <p>.minZoom</p> <p>你能够将相机放大多少 <strong>( 仅适用于OrthographicCamera )</strong> ，其默认值为0。</p> <p>.maxZoom</p> <p>你能够将相机缩小多少 <strong>( 仅适用于OrthographicCamera only )</strong> ，其默认值为Infinity。 .zoomSpeed</p> <p>摄像机缩放的速度，其默认值为1。 Speed of zooming / dollying. Default is 1.</p> <pre><code class=language-javascript>  controls.maxZoom = 2\n  controls.minZoom = 0.6\n  controls.zoomSpeed = 2</code></pre> <p>具体放大系数，可以通过<code>addeventListener</code>监听并访问<code>camera.zoom</code></p> <pre><code class=language-javascript>  controls.addEventListener(&quot;change&quot;, changeControls);\n  function changeControls() {\n    // console.log(event.type);\n    console.log(&#39;放大值&#39;, camera.zoom)\n  }</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704986x1033347913.gif alt=""></p> <h5 id=移动限制>移动限制</h5> <pre><code>.minDistance\n\n你能够将相机向内移动多少（仅适用于PerspectiveCamera），其默认值为0。\n\n.maxDistance : Float\n\n你能够将相机向外移动多少（仅适用于PerspectiveCamera），其默认值为Infinity。\n\n这相当于透视相机的缩放控制，效果基本等同于正交相机的zoom</code></pre><p>演示时用的是 <code>OrthographicCamera</code> 正交相机，使用移动限制需要使用 <code>PerspectiveCamera</code> 透视相机</p> <p>创建一个透视相机</p> <pre><code class=language-javascript>var Pcamera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);\nPcamera.position.set(500, 100, 500); //设置相机位置\nscene.add(Pcamera);</code></pre> <p>修改渲染函数中被渲染的相机</p> <pre><code class=language-javascript>// 渲染函数\nfunction render() {\n    renderer.render(scene, Pcamera); //执行渲染操作\n    controls.update();\n    requestAnimationFrame(render);\n}</code></pre> <p>修改控制器控制的相机</p> <pre><code class=language-javascript>var controls = new THREE.OrbitControls(Pcamera, renderer.domElement);\n// 设置控制器的移动限制\ncontrols.maxDistance = 250\ncontrols.minDistance = 150</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605705017x1033347913.gif alt=""></p> <h3 id=各种速度>各种速度</h3> <pre><code>.panSpeed : Float\n位移的速度，其默认值为1。\n\n.rotateSpeed : Float\n旋转的速度，其默认值为1.\n\n.zoomSpeed : Float\n摄像机缩放的速度，其默认值为1。 Speed of zooming / dollying. Default is 1.</code></pre><p><img src=http://chuantu.xyz/t6/741/1605705051x1033347913.gif alt=""></p> <h3 id=mousebuttons>mouseButtons</h3> <p>这一对象包含了对用于控制的鼠标按钮的引用。</p> <pre><code class=language-javascript>controls.mouseButtons = {\n    LEFT: THREE.MOUSE.ROTATE,\n    MIDDLE: THREE.MOUSE.DOLLY,\n    RIGHT: THREE.MOUSE.PAN\n}</code></pre> <p>左键旋转，右键移动，滚轮缩放，也可以将LEFT和RIGHT的值换一下，右键旋转，左键移动</p> <h3 id=screenspacepanning>screenSpacePanning</h3> <p>定义当平移的时候摄像机的位置将如何移动。如果为true，摄像机将在屏幕空间内平移。 否则，摄像机将在与摄像机向上方向垂直的平面中平移。其默认值为false。</p> <pre><code class=language-javascript>let btn = document.getElementById(&quot;btn&quot;);\nif (btn) {\n    btn.onclick = function () {\n        controls.screenSpacePanning = true;\n    };\n}</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605705090x1031866013.gif alt=""></p> <h3 id=target>target</h3> <p>控制器的焦点，.object的轨道围绕它运行。 它可以在任何时候被手动更新，以更改控制器的焦点。</p> <pre><code class=language-javascript> let btn = document.getElementById(&quot;btn&quot;);\n      if (btn) {\n        btn.onclick = function () {\n          let v3 = new THREE.Vector3(0, 0, 0);\n          setInterval(()=&gt;{\n            if(v3[&#39;y&#39;]&lt;50){\n              controls.target = v3.setY(v3.y+=1)\n            }\n          }, 50)\n        };\n      }</code></pre> <p>用setInterval可以看到具体移动变化，threejs支持tween.js动画，也可以支持骨骼动画，帧动画等，效果会比setInterval好很多</p> <p><img src=http://chuantu.xyz/t6/741/1605705155x1033347913.gif alt=""></p> <h3 id=保存和重置>保存和重置</h3> <pre><code class=language-javascript>this.saveState = function () {\n\n    scope.target0.copy( scope.target );\n    scope.position0.copy( scope.object.position );\n    scope.zoom0 = scope.object.zoom;\n}\n\nthis.reset = function () {\n\n    scope.target.copy( scope.target0 );\n    scope.object.position.copy( scope.position0 );\n    scope.object.zoom = scope.zoom0;\n\n    scope.object.updateProjectionMatrix();\n    scope.dispatchEvent( changeEvent );\n\n    scope.update();\n\n    state = STATE.NONE;\n\n};</code></pre> <p>源码中,保存是将target、相机的position、相机的zoom拷贝下来，重置的时候再将这些值赋值给控制器并更新控制器</p> <p>应用代码：</p> <pre><code class=language-javascript>let save = document.getElementById(&quot;save&quot;);\n  let reset = document.getElementById(&quot;reset&quot;);\n  if(save &amp;&amp; reset){\n    save.onclick = function (){\n      controls.saveState()\n    }\n    reset.onclick = function (){\n      controls.reset()\n    }\n  }</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605705185x1031866013.gif alt=""></p> <p>在保存或者重置时可以单独设置target </p> <h5 id=target0>target0</h5> <p>由 .saveState : saveState和 .reset : reset方法在内部使用。</p> <h5 id=zoom0>zoom0</h5> <p>由 .saveState : saveState和 .reset : reset方法在内部使用。****</p> <h5 id=position0>position0</h5> <p>由 .saveState : saveState和 .reset : reset方法在内部使用。</p> <h5 id=dispose>dispose</h5> <p>移除所有的事件监听。</p> <pre><code class=language-javascript>    this.dispose = function () {\n\n    scope.domElement.removeEventListener( &#39;contextmenu&#39;, onContextMenu, false );\n    scope.domElement.removeEventListener( &#39;mousedown&#39;, onMouseDown, false );\n    scope.domElement.removeEventListener( &#39;wheel&#39;, onMouseWheel, false );\n\n    scope.domElement.removeEventListener( &#39;touchstart&#39;, onTouchStart, false );\n    scope.domElement.removeEventListener( &#39;touchend&#39;, onTouchEnd, false );\n    scope.domElement.removeEventListener( &#39;touchmove&#39;, onTouchMove, false );\n\n    document.removeEventListener( &#39;mousemove&#39;, onMouseMove, false );\n    document.removeEventListener( &#39;mouseup&#39;, onMouseUp, false );\n\n    scope.domElement.removeEventListener( &#39;keydown&#39;, onKeyDown, false );\n\n    //scope.dispatchEvent( { type: &#39;dispose&#39; } ); // should this be added here?\n\n};</code></pre> <p>取消了所有的监听后，鼠标，键盘等事件对控制器无效 效果相当于禁用控制器</p> <pre><code class=language-javascript>function onMouseDown( event ) {\n\n    if ( scope.enabled === false ) return;\n\n    // Prevent the browser from scrolling.\n    event.preventDefault();\n    ......</code></pre> <p>这是部分事件监听方法，如果控制器禁用，就return出去</p> <h3 id=获取旋转角度>获取旋转角度</h3> <pre><code>.getAzimuthalAngle () : radians\n获得当前的水平旋转，单位为弧度。\n\n.getPolarAngle () : radians\n获得当前的垂直旋转，单位为弧度。</code></pre><pre><code class=language-javascript>controls.addEventListener(&quot;change&quot;, changeControls);\nfunction changeControls() {\n    let azimuthal = controls.getAzimuthalAngle ()\n    console.log(&#39;polar&#39;, azimuthal);\n    let polar = controls.getPolarAngle ()\n    console.log(&#39;polar&#39;, polar);\n}\n</code></pre> ';e.exports=n},b148:function(e,t){var n='<html> <p class=name style=display:none>typescript 笔记</p> </html> <html> <p class=tag style=display:none>前端</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605668666x-1224475230.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none>基础案例.html</p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1604235488000</p> </html> <html> <p class=id style=display:none>1604235488000</p> </html> <html> <p class=brief style=display:none>Typescript是一种由微软开发的、开源的编程语言，自2012年10月发布首个公开版以来，它已得到了人们的广泛认可</p> </html> <h3 id=声明空间>声明空间</h3> <h5 id=类型声明空间>类型声明空间</h5> <p>类型声明空间包含用来当做类型注解的内容</p> <pre><code class=language-typescript>// 类型声明空间\ninterface Bar{}</code></pre> <p>可以将这些作为类型注解使用</p> <pre><code class=language-typescript>let bar: Bar\n...</code></pre> <p>虽然定义了interface Bar 却不能把它当做变量使用</p> <pre><code class=language-typescript>interface Foo{}\nlet foo = Foo // “Foo”仅表示类型，但在此处却作为值使用。</code></pre> <p>同理，在定义在变量声明空间中的变量，也不可用于类型声明空间</p> <pre><code class=language-typescript>const foo = {}\nlet bar: foo  // “foo”表示值，但在此处用作类型。</code></pre> <h4 id=模块>模块</h4> <h5 id=全局模块>全局模块</h5> <blockquote> <p>如果在相同的项目中，新建一个foo.ts， 并在foo.ts定一个interface 或者变量，在其他ts文件中是允许访问定义的interface</p> </blockquote> <p>foo.ts</p> <pre><code class=language-typescript>interface Foo {}</code></pre> <p>bar.ts</p> <pre><code class=language-typescript>let bar: Foo // 正确 可以访问到全局声明空间</code></pre> <p>这样使用全局变量是有风险的，会与其他ts代码有冲突</p> <h5 id=文件模块>文件模块</h5> <p>文件模块也被称为外部模块，可以创建一个本地作用域，而不影响其他模块的变量</p> <p>foo.ts</p> <pre><code class=language-typescript>export interface Foo {}</code></pre> <p>bar.ts</p> <pre><code class=language-typescript>import {Foo} from &#39;./foo&#39;\n\nlet bar: Foo</code></pre> <h5 id=""></h5> <h5 id=接口-interface>接口 interface</h5> <pre><code class=language-typescript>interface Person {\n  name: string,  // 姓名\n  gender: string,  // 性别\n  age: number, // 年龄\n  healthy: boolean, // 健康状况\n  family: string[] // 家庭\n}\n\nlet xiaoMing: Person \nxiaoMing = {\n  name: &#39;小明&#39;,\n  gender: &#39;男&#39;,\n  age: 99,\n  healthy: true,\n  family: [&#39;father&#39;, &#39;mother&#39;, &#39;sister&#39;]\n}</code></pre> <p>其他几种情况</p> <pre><code class=language-typescript>interface Animal {\n  name: string,\n  type: string\n}\n\n// 缺少项\nlet dog: Animal \ndog = {\n  // 类型 &quot;{ name: string; }&quot; 中缺少属性 &quot;type&quot;\n  name: &#39;旺财&#39;\n}\n// 类型错误\nlet cat: Animal \ncat = {\n  name: &#39;花花&#39;,\n  type: true // 不能将类型“boolean”分配给类型“string”\n}</code></pre> <p>如果将type定义为非必要属性 可以使用关键字‘?’</p> <pre><code class=language-typescript>interface Animal {\n  name: string,\n  type?: string\n}\n\n\nlet cat: Animal \ncat = {\n  name: &#39;花花&#39;,\n  type: &#39;英短猫&#39; \n}\n\n</code></pre> <h5 id=泛型>泛型</h5> <p>函数reverse接受䘝类型为T （注意在reverse<t>中的类型参数）的数组items:T[]，返回一个类型为T的数组（注意：T[]）。因为函数reverse的返回值类型与它接收的参数的类型一样，所以传入 <code>var sample = [1,2,3]</code> 时，typescript就能推断出reverse为number[]的类型，从而能为你提供类型安全。与此相似，当你想函数reverse传入一个类型为string[]类型的数组时，typescript也能推断出返回结果也是string[]类型的，而且是类型安全的</t></p> <pre><code class=language-typescript>function revares&lt;T&gt;(items: T[]): T[] {\n  const toreturn = []\n  for (let i = items.length - 1; i &gt;= 0; i--) {\n    toreturn.push(items[i])\n  }\n  return toreturn\n}\n\nconst sample = [false, true]\nconst reversed = revares(sample)\nconsole.log(reversed) // 3，2，1</code></pre> <p>交叉类型</p> <pre><code class=language-typescript>function extend&lt;T,U&gt;(first: T, second: U): T &amp; U {\n  const result = &lt;T &amp; U&gt; {}\n  for(let id in first) {\n    (&lt;T&gt;result)[id] = first[id]\n  }\n  for(let id in second) {\n    if(!(result as any).hasOwnProperty(id)) {\n      (&lt;U&gt;result)[id] = second[id]\n    }\n  }\n  return result\n}\nconst x = extend({a: &#39;hello&#39;}, {b: 42})\nconsole.log(x)  // {a: &quot;hello&quot;, b: 42}</code></pre> ';e.exports=n},b2b7:function(e,t,n){"use strict";var o=n("4b19"),l=n.n(o);l.a},b44f:function(e,t,n){},c41e:function(e,t){var n='<html> <p class=name style=display:none>面</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605704538x1033347913.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1589803200000</p> </html> <html> <p class=id style=display:none>1589803200000</p> </html> <html> <p class=brief style=display:none></p> </html> <h3 id=通过顶点绘制面>通过顶点绘制面</h3> <pre><code class=language-javascript>var geometry = new THREE.BufferGeometry(); //声明一个缓冲几何体对象\n\n//类型数组创建顶点位置position数据\nvar vertices = new Float32Array([\n  0, 0, 0, //顶点1坐标\n  50, 0, 0, //顶点2坐标\n  0, 100, 0, //顶点3坐标\n\n  0, 0, 10, //顶点4坐标\n  0, 0, 100, //顶点5坐标\n  50, 0, 10, //顶点6坐标\n]);\n// 创建属性缓冲区对象\nvar attribue = new THREE.BufferAttribute(vertices, 3); //3个为一组，作为一个顶点的xyz坐标\n// 设置几何体attributes属性的位置position属性\ngeometry.attributes.position = attribue;\n\n//材质对象\nvar material = new THREE.MeshBasicMaterial({\n  // 使用顶点颜色数据渲染模型，不需要再定义color属性\n  color: 0xff0000,\n  // vertexColors: THREE.VertexColors, //以顶点颜色为准\n});\n// 网格模型  三角面渲染模式\nvar mesh = new THREE.Mesh(geometry, material); //网格模型\nscene.add(mesh); //点对象添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704538x1033347913.png alt=""></p> <h3 id=通过顶点颜色设置彩色面>通过顶点颜色设置彩色面</h3> <pre><code class=language-javascript>//类型数组创建顶点颜色color数据\nvar colors = new Float32Array([\n  1, 0, 0, //顶点1颜色\n  0, 1, 0, //顶点2颜色\n  0, 0, 1, //顶点3颜色\n\n  1, 1, 0, //顶点4颜色\n  0, 1, 1, //顶点5颜色\n  1, 0, 1, //顶点6颜色\n]);\n// 设置几何体attributes属性的颜色color属性\ngeometry.attributes.color = new THREE.BufferAttribute(colors, 3); //3个为一组,表示一个顶点的颜色数据RGB\n\n//材质对象\nvar material = new THREE.MeshBasicMaterial({\n  // 使用顶点颜色数据渲染模型，不需要再定义color属性\n  // color: 0xff0000,\n  vertexColors: THREE.VertexColors, //以顶点颜色为准\n});</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605704578x1031866013.png alt=""></p> ';e.exports=n},cc4a:function(e,t){var n='<html> <p class=name style=display:none>点</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1603876048x1033347913.png</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1588075200000</p> </html> <html> <p class=id style=display:none>1588075200000</p> </html> <html> <p class=brief style=display:none> 正所谓，一生二，二生三，三生万物，点最为构成3D世界的最基础元素，在平时的应用中作用大大的 </p> </html> <h3 id=按网格模型顶点创建点>按网格模型顶点创建点</h3> <h5 id=提取顶点信息>提取顶点信息</h5> <p>创建一个网格几何体并访问顶点信息</p> <pre><code class=language-javascript>var geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个球体几何对象\n  console.log(geometry.vertices)\n  // 创建一个点材质对象\n  // PointsMaterial // 点材质\n  var material = new THREE.MeshLambertMaterial({\n    color: 0x0000ff, //颜色\n  });\n  //网格模型对象  参数：几何体  点材质\n  var mesh = new THREE.Mesh(geometry, material);\n  scene.add(mesh); //网格模型添加到场景中\n</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603876048x1033347913.png alt=""></p> <p>得到了一组顶点信息，将来，点模型也会将渲染到这8个顶点上</p> <p>通过顶点的位置渲染<a href=https://threejs.org/docs/index.html#api/zh/materials/PointsMaterial>点材质</a></p> <pre><code class=language-javascript> var scene = new THREE.Scene();\n  /**\n   * 创建网格模型\n   */\n  var geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个球体几何对象\n  console.log(geometry.vertices)\n  // 创建一个点材质对象\n  // PointsMaterial // 点材质\n  var material = new THREE.PointsMaterial({\n    color: 0xffff00, //颜色\n    size: 10\n  });\n  //点模型对象  参数：几何体  点材质\n  var point = new THREE.Points(geometry, material);\n  scene.add(point); //网格模型添加到场景中</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603876089x1033347913.png alt=""></p> <h3 id=通过设置顶点信息创建点>通过设置顶点信息创建点</h3> <p>上文中，顶点信息都是一个vector3对象，我们可以手动设置顶点信息，并渲染为点模型</p> <h5 id=设置顶点>设置顶点</h5> <pre><code class=language-javascript>var geometry = new THREE.BufferGeometry(); //声明一个缓冲几何体对象\n\n  //类型数组创建顶点位置position数据\n  var vertices = new Float32Array([\n    0, 0, 0, //顶点1坐标\n    50, 0, 0, //顶点2坐标\n    50, 50, 0, //顶点3坐标\n    0, 50, 0, //顶点4坐标\n  ]);\n  // 创建属性缓冲区对象\n  geometry.setAttribute(\n    &quot;position&quot;,\n    new THREE.Float32BufferAttribute(vertices, 3)\n  );\n\n  var material = new THREE.PointsMaterial({\n    // 使用顶点颜色数据渲染模型，不需要再定义color属性\n    color: 0xff0000,\n    size: 15, //点对象像素尺寸\n  });\n\n  var points = new THREE.Points(geometry, material); //点模型对象\n  scene.add(points); //点对象添加到场景中\n</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603876124x1700338641.png alt=""></p> <h5 id=设置顶点颜色>设置顶点颜色</h5> <p>能够对每一个顶点定位，也可以改变每一个顶点的颜色</p> <pre><code class=language-javascript>var colors = new Float32Array([\n    1, 0, 0, //顶点1颜色\n    0, 1, 0, //顶点2颜色\n    0, 0, 1, //顶点3颜色\n    1, 1, 0, //顶点4颜色\n]);\n// 设置几何体attributes属性的颜色color属性\ngeometry.attributes.color = new THREE.BufferAttribute(colors, 3); //3个为一组,表示一个顶点的颜色数据RGB\n\nvar material = new THREE.PointsMaterial({\n    // 使用顶点颜色数据渲染模型，不需要再定义color属性\n    vertexColors: THREE.VertexColors, //以顶点颜色为准\n    size: 15, //点对象像素尺寸\n});\n</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603876276x1033347913.png alt=""></p> <h3 id=通过范围批量创建点>通过范围批量创建点</h3> <pre><code class=language-javascript>var vertices = [];\n\n  var colors = [];\n  // 设置几何体attributes属性的颜色color属性\n\n  for (var i = 0; i &lt; 10000; i++) {\n    var x = THREE.MathUtils.randFloatSpread(200);\n    var y = THREE.MathUtils.randFloatSpread(200);\n    var z = THREE.MathUtils.randFloatSpread(200);\n    vertices.push(x, y, z);\n    // 随机颜色\n    let c = new THREE.Color(Math.random() * 0xffffff);\n    colors.push(c.r, c.g, c.b);\n  }\n  console.log(colors);\n\n  var geometry = new THREE.BufferGeometry();\n  geometry.attributes.color = new THREE.BufferAttribute(\n    new Float32Array(colors),\n    3\n  );\n  geometry.setAttribute(\n    &quot;position&quot;,\n    new THREE.Float32BufferAttribute(vertices, 3)\n  );\n\n  var material = new THREE.PointsMaterial({\n    size: 5,\n    vertexColors: THREE.VertexColors, //以顶点颜色为准\n  });\n\n  var points = new THREE.Points(geometry, material);\n\n  scene.add(points);</code></pre> <p><img src=http://chuantu.xyz/t6/741/1603876323x1700338641.png alt=""></p> ';e.exports=n},d6a3:function(e,t){var n="<html> <p class=name style=display:none>初入THREE.js</p> </html> <html> <p class=tag style=display:none>前端|转载</p> </html> <html> <p class=coverPic style=display:none>http://n.sinaimg.cn/sinacn11/680/w400h280/20180511/263d-hamfahw1625944.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none>基础案例.html</p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1570872223000</p> </html> <html> <p class=id style=display:none>1570872223000</p> </html> <html> <p class=brief style=display:none>Three.js 是一款运行在浏览器中的 3D引擎，你可以用它创建各种三维场景，包括了摄影机、光影、材质等各种对象。你可以在它的主页上看到许多精彩的演示。不过，这款引擎目前还处在比较不成熟的开发阶段，其不够丰富的 API 以及匮乏的文档增加了初学者的学习难度（尤其是文档的匮乏）three.js的代码托管在github上面。</p> </html> <blockquote> <h4 id=创建一个场景（creating-a-scene）>创建一个场景（Creating a scene）</h4> </blockquote> <p>这一部分将对 three.js 来做一个简要的介绍；我们将开始搭建一个场景，其中包含一个正在旋转的立方体。页面下方有一个已经完成的例子，当你遇到麻烦，或者需要帮助的时候，可以看一看。</p> <blockquote> <h4 id=开始之前>开始之前</h4> </blockquote> <p>在开始使用 three.js 之前，你需要一个地方来显示它。将下列 HTML 代码保存为你电脑上的一个 HTML 文件，同时将 three.js 复制到该 HTML 文件所在的目录下的 js/目录下，然后在你的浏览器中打开这个 HTML 文件。</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;My first three.js app&lt;/title&gt;\n        &lt;style&gt;\n            body { margin: 0; }\n            canvas { width: 100%; height: 100% }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script src=&quot;js/three.js&quot;&gt;&lt;/script&gt;\n        &lt;script&gt;\n            // Our Javascript will go here.\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>好了，接下来的所有代码将会写入到空的 script 标签中。</p> <blockquote> <h4 id=创建一个场景>创建一个场景</h4> </blockquote> <p>为了真正能够让你的场景借助 three.js 来进行显示，我们需要以下几个对象：场景、相机和渲染器，这样我们就能透过摄像机渲染出场景。</p> <pre><code>var scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );</code></pre><p>我们花一点点时间来解释一下这里发生了什么。我们现在建立了场景、相机和渲染器。</p> <p>three.js 里有几种不同的相机，在这里，我们使用的是 PerspectiveCamera（透视摄像机）。</p> <p>第一个参数是<strong>视野角度（FOV）</strong>。视野角度就是无论在什么时候，你所能在显示器上看到的场景的范围，它的值是角度单位。</p> <p>接下来的两个参数是<strong>近截面</strong>（near）和<strong>远截面</strong>（far）。 当物体某些部分比摄像机的远截面远或者比近截面近的时候，该这些部分将不会被渲染到场景中。或许现在你不用担心这个值的影响，但未来为了获得更好的渲染性能，你将可以在你的应用程序里去设置它。</p> <p>接下来是渲染器。这里是施展魔法的地方。除了我们在这里用到的 WebGLRenderer 渲染器之外，Three.js 同时提供了其他几种渲染器，当用户所使用的浏览器过于老旧，或者由于其他原因不支持 WebGL 时，可以使用这几种渲染器进行降级。</p> <p>除了创建一个渲染器的实例之外，我们还需要在我们的应用程序里设置一个渲染器的尺寸。比如说，我们可以使用所需要的渲染区域的宽高，来让渲染器渲染出的场景填充满我们的应用程序。因此，我们可以将渲染器宽高设置为浏览器窗口宽高。对于性能比较敏感的应用程序来说，你可以使用<strong>setSize</strong>传入一个较小的值，例如<strong>window.innerWidth/2</strong>和<strong>window.innerHeight/2</strong>，这将使得应用程序在渲染时，以一半的长宽尺寸渲染场景。</p> <p>最后一步很重要，我们将 renderer（渲染器）的 dom 元素（renderer.domElement）添加到我们的 HTML 文档中。这就是渲染器用来显示场景给我们看的 canvas 元素。</p> <p><em>“嗯，看起来很不错，那你说的那个立方体在哪儿？”</em>接下来，我们就来添加立方体。</p> <pre><code>var geometry = new THREE.BoxGeometry( 1, 1, 1 );\nvar material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\nvar cube = new THREE.Mesh( geometry, material );\nscene.add( cube );\n\ncamera.position.z = 5;</code></pre><p>要创建一个立方体，我们需要一个<strong>BoxGeometry</strong>（立方体）对象. 这个对象包含了一个立方体中所有的<strong>顶点</strong>（vertices）和<strong>面</strong>（faces）。未来我们将在这方面进行更多的探索。</p> <p>接下来，对于这个立方体，我们需要给它一个材质，来让它有颜色。Three.js 自带了几种材质，在这里我们使用的是<strong>MeshBasicMaterial</strong>。所有的材质都存有应用于他们的属性的对象。在这里为了简单起见，我们只设置一个 color 属性，值为<strong>0x00ff00</strong>，也就是绿色。这里所做的事情，和在 CSS 或者 Photoshop 中使用十六进制(<strong>hex colors</strong>)颜色格式来设置颜色的方式一致。</p> <p>第三步，我们需要一个<strong>Mesh</strong>（网格）。 网格包含一个几何体以及作用在此几何体上的材质，我们可以直接将网格对象放入到我们的场景中，并让它在场景中自由移动。</p> <p>默认情况下，当我们调用<strong>scene.add()</strong>的时候，物体将会被添加到<strong>(0,0,0)</strong>坐标。但将使得摄像机和立方体彼此在一起。为了防止这种情况的发生，我们只需要将摄像机稍微向外移动一些即可。</p> <blockquote> <h4 id=渲染场景>渲染场景</h4> </blockquote> <p>现在，如果将之前写好的代码复制到 HTML 文件中，你不会在页面中看到任何东西。这是因为我们还没有对它进行真正的渲染。为此，我们需要使用一个被叫做“<strong>渲染循环</strong>”（render loop）或者“<strong>动画循环</strong>”（animate loop）的东西。</p> <pre><code>function animate() {\n    requestAnimationFrame( animate );\n    renderer.render( scene, camera );\n}\nanimate();</code></pre><p>在这里我们创建了一个使渲染器能够在每次屏幕刷新时对场景进行绘制的循环（在大多数屏幕上，刷新率一般是 60 次/秒）。如果你是一个浏览器游戏开发的新手，你或许会说“<em>为什么我们不直接用 setInterval 来实现刷新的功能呢？”</em>当然啦，我们的确可以用 setInterval，但是，<strong>requestAnimationFrame</strong>有很多的优点。最重要的一点或许就是当用户切换到其它的标签页时，它会暂停，因此不会浪费用户宝贵的处理器资源，也不会损耗电池的使用寿命。</p> <blockquote> <h4 id=使立方体动起来>使立方体动起来</h4> </blockquote> <p>在开始之前，如果你已经将上面的代码写入到了你所创建的文件中，你可以看到一个绿色的方块。让我们来做一些更加有趣的事 —— 让它旋转起来。</p> <p>将下列代码添加到 animate()函数中<strong>renderer.render</strong>调用的上方：</p> <pre><code>cube.rotation.x += 0.01;\ncube.rotation.y += 0.01;</code></pre><p>这段代码每帧都会执行（正常情况下是 60 次/秒），这就让立方体有了一个看起来很不错的旋转动画。基本上来说，当应用程序运行时，如果你想要移动或者改变任何场景中的东西，都必须要经过这个动画循环。当然，你可以在这个动画循环里调用别的函数，这样你就不会写出有上百行代码的<strong>animate</strong>函数。</p> <blockquote> <h4 id=结果>结果</h4> </blockquote> <p>祝贺你！你现在已经成功完成了你的第一个 Three.js 应用程序。虽然它很简单，但现在你已经有了一个入门的起点。</p> <p>下面是完整的代码，可在<a href=https://jsfiddle.net/mkba0ecu/ >live example</a>运行、编辑；运行或者修改代码有助于你更好的理解它是如何工作的。</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My first three.js app&lt;/title&gt;\n        &lt;style&gt;\n            body { margin: 0; }\n            canvas { width: 100%; height: 100% }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script src=&quot;js/three.js&quot;&gt;&lt;/script&gt;\n        &lt;script&gt;\n            var scene = new THREE.Scene();\n            var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n\n            var renderer = new THREE.WebGLRenderer();\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            document.body.appendChild( renderer.domElement );\n\n            var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n            var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n            var cube = new THREE.Mesh( geometry, material );\n            scene.add( cube );\n\n            camera.position.z = 5;\n\n            var animate = function () {\n                requestAnimationFrame( animate );\n\n                cube.rotation.x += 0.01;\n                cube.rotation.y += 0.01;\n\n                renderer.render( scene, camera );\n            };\n\n            animate();\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>";e.exports=n},e748:function(e,t){var n='<html> <p class=name style=display:none>玩一玩线</p> </html> <html> <p class=tag style=display:none>原创|3D</p> </html> <html> <p class=coverPic style=display:none>http://chuantu.xyz/t6/741/1605669018x992249049.gif</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1590148800000</p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1590148800000</p> </html> <html> <p class=brief style=display:none> </p> </html> <h3 id=line><a href=https://threejs.org/docs/index.html#api/zh/objects/Line>Line</a></h3> <h5 id=直线>直线</h5> <pre><code class=language-javascript>  var material = new THREE.LineBasicMaterial({\n    color: 0xff00ff,\n    linewidth: 1,\n  });\n\n  var points = [];\n  points.push(new THREE.Vector3(50, 50, 0));\n  points.push(new THREE.Vector3(0, 50, 50));\n\n  var geometry = new THREE.BufferGeometry().setFromPoints(points);\n\n  var line = new THREE.Line(geometry, material);\n  scene.add(line);</code></pre> <ul> <li><p>linewidth 控制线宽。默认值为 1。</p> <p> <code>由于OpenGL Core Profile与 大多数平台上WebGL渲染器的限制，无论如何设置该值，线宽始终为1。</code></p> </li> </ul> <p>这里设置线宽，是没有效果的，官网案例提供其他的宽线的处理方式，下文写出</p> <h5 id=虚线>虚线</h5> <pre><code class=language-javascript>// 基础线条材质\n      var material = new THREE.LineDashedMaterial({\n        color: 0xff00ff,\n        scale: 1,\n        dashSize: 3,\n        gapSize: 1,\n      });\n\n      var points = [];\n      points.push(new THREE.Vector3(50, 50, 0));\n      points.push(new THREE.Vector3(0, 50, 50));\n\n      var geometry = new THREE.BufferGeometry().setFromPoints(points);\n      var line = new THREE.Line(geometry, material);\n      line.computeLineDistances(); // 计算LineDashedMaterial所需的距离的值的数组。 对于几何体中的每一个顶点，这个方法计算出了当前点到线的起始点的累积长度。\n      scene.add(line);</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605668901x1822611420.png alt=""></p> <h5 id=可以调整宽度的线条>可以调整宽度的线条</h5> <pre><code class=language-javascript>let points = [];\npoints.push(0, 0, 0);\npoints.push(0, 0, 20);\n\nvar geometry = new LineGeometry();\ngeometry.setPositions(points);\n\n//类型数组创建顶点颜色color数据\nvar colors = []\ncolors.push(1,0,1)\ncolors.push(1,1,0)\n// 设置几何体attributes属性的颜色color属性\ngeometry.setColors(colors); \n\n\nmatLine = new LineMaterial({\n    linewidth: 5, // 可以调整线宽\n    vertexColors: true, // 是否使用顶点颜色\n});\n\nline = new Line2(geometry, matLine);\nscene.add(line);\n</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605668945x992248267.png alt=""></p> <blockquote> <p>Line2 这个官网没有具体的api，具体参数需要通过观察源码进行探索</p> </blockquote> <pre><code>import { Line2 } from &quot;./jsm/lines/Line2.js&quot;;</code></pre><blockquote> <p>LineMaterial 材质</p> </blockquote> <pre><code>import { LineMaterial } from &quot;./jsm/lines/LineMaterial.js&quot;;</code></pre><blockquote> <p>LineGeometry 几何体对象</p> </blockquote> <pre><code>import { LineGeometry } from &quot;./jsm/lines/LineGeometry.js&quot;;\n\n设置顶点：setPositions\n设置顶点颜色：setColors\n以线段为基础绘制： fromLine</code></pre><h5 id=fromline>fromLine</h5> <pre><code class=language-javascript>var Linematerial = new THREE.LineDashedMaterial({\n    color: 0xff00ff,\n    scale: 1,\n    dashSize: 3,\n    gapSize: 1,\n});\n\nvar Linegeometry = new THREE.BufferGeometry(); //声明一个缓冲几何体对象\n\n//类型数组创建顶点位置position数据\nvar vertices = new Float32Array([\n    10, 0, 0, //顶点1坐标\n    0, 0, 0, //顶点2坐标\n    10, 10, 0 //顶点3坐标\n]);\n// 创建属性缓冲区对象\nvar attribue = new THREE.BufferAttribute(vertices, 3); //3个为一组，作为一个顶点的xyz坐标\n// 需要传position信息 \nLinegeometry.position = attribue;\n\nvar line1 = new THREE.Line(Linegeometry, Linematerial);\n\nvar geometry = new LineGeometry();\ngeometry.fromLine(line1)\nmatLine = new LineMaterial({\n    color: 0xffffff,\n    linewidth: 5, // in pixels\n    vertexColors: false,\n    dashed: true,\n});\n\nline = new Line2(geometry, matLine);\nscene.add(line);</code></pre> <p><img src=http://chuantu.xyz/t6/741/1605668987x992249049.png alt=""></p> <h3 id=可以自己成长的线>可以自己成长的线</h3> <p><img src=http://chuantu.xyz/t6/741/1605669018x992249049.gif alt=""></p> ';e.exports=n},fc27:function(e,t){var n='<html> <p class=name style=display:none>游·梦想小镇</p> </html> <html> <p class=tag style=display:none>小记</p> </html> <html> <p class=coverPic style=display:none>https://s2.ax1x.com/2019/11/17/MD4dII.jpg</p> </html> <html> <p class=reprint style=display:none></p> </html> <html> <p class=case style=display:none></p> </html> <html> <p class=author style=display:none>孙华鹏</p> </html> <html> <p class=date style=display:none>1573833600000 </p> </html> <html> <p style=display:none>获取时间戳Date.parse(new Date());</p> </html> <html> <p class=id style=display:none>1573833600000</p> </html> <html> <p class=brief style=display:none>挎着嘟嘟小姐，孙先生脸上洋溢着老父亲般的微笑... </p> </html> <h3 id=游-·-梦想小镇>游 · 梦想小镇</h3> <p>自姜同学带领孙先生游览了一次梦想小镇后...</p> <p>那时嘟嘟小姐还并没有来到杭州，通过孙先生分享的游玩照片，便对梦想小镇神往，梦想小镇虽为近年来的人工景点，但环境颇有古风。</p> <img src=https://s2.ax1x.com/2019/11/17/MD6Xmq.jpg alt=image style=zoom:50%;width:50% /> <h3 id=""></h3> <h3 id=-1></h3> <blockquote> <p>接她</p> </blockquote> <p>周五晚上五点整，得知公司晚上不需加班，便约好嘟嘟小姐，嘟嘟小姐刚面试回来，风尘仆仆，孙先生问嘟嘟小姐需要补妆不，嘟嘟小姐表示只需简单补一下就可以，孙先生这便放心；</p> <p>六点，孙先生挎上自己的小饭盒，飞也似的奔出公司，半个小时便到家，打开门，嘟嘟小姐正在化妆柜前完成妆容的最后一步，没有浓妆艳抹，淡扫蛾眉，敲到好处，只试穿的有点少，嘟嘟小姐表示不冷；</p> <p>两个小时后，啪啪打脸；</p> <h3 id=-2></h3> <h3 id=-3></h3> <blockquote> <p>出发</p> </blockquote> <p>路上嘟嘟小姐一路无话；</p> <p>“嘛呢？”</p> <p>&quot;刷题呢！&quot;</p> <p>对哦 周六嘟嘟小姐有考试；</p> <p>“...”</p> <p>“...”</p> <p>&quot;快到阿里了&quot;</p> <p>嘟嘟小姐放下手机张望：“哪里？”</p> <p>“左边。”</p> <p>“灯火通明啊~”</p> <p>确实时间还早，七点多一点。</p> <p>路上孙先生给嘟嘟小姐指了现在的公司位置，以及上一个公司的位置，</p> <p>旅途没多久，半个小时到了，停车困难绝对是个大问题，好在孙先生之前来过，轻车熟路找到一个“合法”的路边车位。</p> <img src=https://s2.ax1x.com/2019/11/17/MD5qc8.jpg alt=image style=zoom:50%;width:50% /> <h3 id=-4></h3> <h3 id=-5></h3> <blockquote> <p>逛</p> </blockquote> <p>挎着嘟嘟小姐，孙先生脸上洋溢着老父亲般慈祥的微笑，嘟嘟小姐实在太小只了，弄得我差点想去买个桔子了;</p> <p>刚进小镇，实在没什么看头，路边大大小小的商铺琳琅满目，无非一些吃的；</p> <p>由于孙先生之前来过，所以带着嘟嘟小姐熟练的穿过乱七八糟的店铺，一条长廊映入眼前，被金黄的灯光渲染的还有一种黄金大道的感觉，估计白天的话，也没有这种效果。</p> <img src=https://s2.ax1x.com/2019/11/17/MDo2ee.jpg alt=image style=zoom:50%;width:50% /> <h3 id=-6></h3> <h3 id=-7></h3> <p>穿过长廊，便是河流，可能是钱塘江的缘故，杭州到处都有着河流，顺着河流一直往里走，河边便是一些民宿，挂着门牌号，同时也挂着“内有住户，勿扰”的牌子，偶尔有几个大门是微微开着的，顺着门缝往里看，里面一片漆黑，对面窗户洒进来的微弱月光，还能依稀看到楼梯的影子，住客想是在二楼叭；</p> <p>往前就是《章太炎故居》，嘟嘟小姐并不知章太炎的伟大事迹，孙先生偷偷搜了一下，并装作知道的样子，告诉嘟嘟小姐；</p> <p>其实孙先生之前也并不知道，但是男人嘛，无时无刻不想在自己女人面前展示自己的能力；</p> <p>孙先生并不知道，自己的伎俩有多么笨拙，嘟嘟小姐只是静静的听着，时不时地抿嘴笑；</p> <p>对于以章太炎故居、四无粮仓的历史底蕴来说，除了了解一下景色背后的历史知识或者历史文化，也就是照片能证明自己来过，所以拍了几张照片孙先生和嘟嘟小姐就出来找吃的了；</p> <img src=https://s2.ax1x.com/2019/11/17/MDORj1.md.png alt=image style=zoom:50%;width:50% /> <h3 id=-8></h3> <h3 id=-9></h3> <blockquote> <p>吃</p> </blockquote> <p>在小镇里面逛了一大圈，惊奇的是，除了吃的店，最多的就是美容美发美甲的店儿，周边基本都是创客区或者是办公楼，实在想不到两者有什么关联，吃的店很多，从小吃到饭店，从重庆火锅到北京朝天门；</p> <p>“这家店人好多啊。”</p> <p>顺着嘟嘟小姐手指的方向看去，一家毫不起眼的小店儿门口坐满了等单的食客，然而旁边的几个店铺却门可罗雀，孙先生看着这般景象，突然想到了郭德纲的一句“小店有人参”。</p> <p>嘟嘟小姐挽着孙先生，一起走近了这家火爆异常的火锅店，发现等单的实在太多，就像是周末的商场4楼，食客们手里临着菜单在点菜，穿着红色服务生服装的店员，穿梭其中；</p> <p>“这家店，味道应该不错”</p> <p>嘟嘟小姐呢喃着；</p> <p>“要不要在这里排队啊？”</p> <p>“不要了吧，好吃也不值得等那么久。”</p> <p>孙先生和嘟嘟小姐并没有对这家“好吃的店”付出太多耐心；</p> <img src=https://s2.ax1x.com/2019/11/17/MrFhDg.png alt=MrFhDg.png style=zoom:50%;width:50% /> <h3 id=-10></h3> <h3 id=-11></h3> <p>一路走一路看，看经过的门店的经营种类，抬头看看店名，大多是一个门头朴素、牌匾简单的小店，不过大多萧条；</p> <p>甚至有三两家店内空空荡荡，店员也偷偷的躲在角落，生怕手机屏幕的光线把黑夜撕裂</p> <p>没一会，嘟嘟小姐提出要吃“垃圾食品”；</p> <p>所谓的垃圾食品，是孙先生和嘟嘟小姐对于路边烤串和炸串摊位的称谓；</p> <p>对于嘟嘟小姐来说，炸鸡是难以抵挡的诱惑，这种炸鸡类食品各地方做的基本无差；</p> <p>而对于孙先生来说，臭豆腐却是这种店唯一吸引他的特色；</p> <p>孙先生喜欢吃的是在大连时候住过的一个小区附近的臭豆腐，而并非长沙那种“臭遍街”的臭豆腐，所以那种味道成为孙先生自来杭州便没尝过的美味；</p> <p>搜搜寻寻，终于找到一家炸货店，是那种到处都有的炸串店，门脸不大，只有一个操作区，开放式“厨房”，厨房的四周由展品柜、收银台、取货区组成，侧边几个零散的吧椅，供等待的食客小憩；</p> <p>嘟嘟小姐点了一份炸鸡块，孙先生则意思的点了几把小串，价格倒是不贵，只是相对于景区来说；</p> <p><img src=https://s2.ax1x.com/2019/11/17/Mrn2n0.png alt=Mrn2n0.png></p> <p>小吃对于孙先生和嘟嘟小姐只是饭前的开胃食品，接下来找到才是吃正餐的店，</p> <p>走一路没有比较惊艳的店，倒是有一家东北菜馆，不过两个人吃炒菜有点太奢侈，思来想去还是从这家店出来了，兜兜转转的，发现一家重庆火锅店；</p> <img src=https://s2.ax1x.com/2019/11/17/Mr1SX9.png alt=重庆老火锅.png style=zoom:50%;width:50% /> <h3 id=-12></h3> <h3 id=-13></h3> <p>门脸很精致，简单的牌匾，打印着自己店的名字，里面紧凑的摆着5-6张实木方桌，没有俏丽的服务员，也没有统一的制服，只有两个阿姨忙里忙外，当我们要走进店里的时候，一个瘦瘦的阿姨操着一口不是很标准的普通话迎接孙先生和嘟嘟小姐，并表示没有空余的座位，需要等待一会，顺便点个餐；</p> <p>看着感觉不错，于是孙先生和嘟嘟小姐在门口找了一个凳儿坐了下来；</p> <p>菜单倒是很简单，除了火锅店必备的菜品，再就有一些串（本以为是炸的，上来之后才知道需要自己涮），几个标注特色的锅底，微辣中辣重庆辣，孙先生倒是可以吃点辣的，嘟嘟女士并不能吃辣，于是两个人点了骨汤锅底；</p> <p>“感觉吃了不正宗的火锅”</p> <p>孙先生抱怨道，嘟嘟女士吐了吐舌头，继续点菜，</p> <p>点完菜没多久，便有一对小情侣吃完撤了，阿姨收拾了一下桌子，便招呼我们过去坐，因为是火锅，所以上菜都比较快</p> <p>菜品比较新鲜，汤底也比较正宗，不过小料不是很丰富，简单的油盐酱醋芝麻酱麻油辣椒之类的，吃的倒是很快，把胃填了个“沟满壕平”......</p> <p>“下次一定要尝一下他家的辣锅底”</p> <p>这是孙先生给出的评语；</p> <p>“好撑啊！”</p> <p>这是嘟嘟小姐的感叹</p> <p><a href=https://imgchr.com/i/Mra4UJ><img src=https://s2.ax1x.com/2019/11/17/Mra4UJ.md.jpg alt=易烊千玺 style=zoom:50%;width:50% /></a></p> <h3 id=-14></h3> <h3 id=-15></h3> <blockquote> <p>归</p> </blockquote> <p>吃饱喝足，也逛的踏踏实实，时间也不早了，该回家了，途中路过阿里巴巴，已经十点多将近十一点，阿里巴巴依然灯火通明，没有容易的人生，继续加油......</p> ';e.exports=n}});
//# sourceMappingURL=app.b7a35277.js.map