{
  "version": 3,
  "sources": ["../three/examples/jsm/shaders/ConvolutionShader.js", "../three/examples/jsm/postprocessing/BloomPass.js"],
  "sourcesContent": ["import {\n\tVector2\n} from 'three';\n\n/**\n * Convolution shader\n * ported from o3d sample to WebGL / GLSL\n * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n */\n\nconst ConvolutionShader = {\n\n\tdefines: {\n\n\t\t'KERNEL_SIZE_FLOAT': '25.0',\n\t\t'KERNEL_SIZE_INT': '25'\n\n\t},\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'uImageIncrement': { value: new Vector2( 0.001953125, 0.0 ) },\n\t\t'cKernel': { value: [] }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float cKernel[ KERNEL_SIZE_INT ];\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 imageCoord = vUv;\n\t\t\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\n\t\t\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\n\t\t\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\t\t\timageCoord += uImageIncrement;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}`,\n\n\tbuildKernel: function ( sigma ) {\n\n\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\tconst kMaxKernelSize = 25;\n\t\tlet kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\n\t\tconst halfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\tconst values = new Array( kernelSize );\n\t\tlet sum = 0.0;\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) {\n\n\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\tsum += values[ i ];\n\n\t\t}\n\n\t\t// normalize the kernel\n\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\treturn values;\n\n\t}\n\n};\n\nfunction gauss( x, sigma ) {\n\n\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n}\n\nexport { ConvolutionShader };\n", "import {\n\tAdditiveBlending,\n\tLinearFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n\n\tconstructor( strength = 1, kernelSize = 25, sigma = 4, resolution = 256 ) {\n\n\t\tsuper();\n\n\t\t// render targets\n\n\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\tthis.renderTargetX = new WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetX.texture.name = 'BloomPass.x';\n\t\tthis.renderTargetY = new WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetY.texture.name = 'BloomPass.y';\n\n\t\t// copy material\n\n\t\tif ( CopyShader === undefined ) console.error( 'THREE.BloomPass relies on CopyShader' );\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.copyUniforms[ 'opacity' ].value = strength;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tif ( ConvolutionShader === undefined ) console.error( 'THREE.BloomPass relies on ConvolutionShader' );\n\n\t\tconst convolutionShader = ConvolutionShader;\n\n\t\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\t\tthis.convolutionUniforms[ 'cKernel' ].value = ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader: convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\n\t\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\n\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this.renderTargetX.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n}\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\nexport { BloomPass };\n"],
  "mappings": "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",
  "names": []
}
