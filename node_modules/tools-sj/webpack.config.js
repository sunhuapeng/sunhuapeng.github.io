const path = require("path");
const pluginsConfig = require("./webpack.plugins.js");
const tag = process.env.NODE_ENV === 'npm'
const entry = {
  tools: "./src/scene/index.ts",
}
const output = {
  filename: tag?"[name].build.js":"[name].min.js",
  path: path.resolve(__dirname, tag?"map/build":"map/script"),
  libraryTarget: tag?"commonjs": "var",
}
if(process.env.NODE_ENV===undefined) {
  entry.toolsTest = "./src/test/index.ts"
  output.library =  'toolsSj'
}
module.exports = {
  entry: entry,
  mode: "development",
  plugins: pluginsConfig,
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        use: ["file-loader"],
      },
      {
        test: /\.less$/,
        use: ["style-loader", "css-loader", "less-loader"],
      },
      {
        test: /\.tsx?$/,
        use: {
          loader: "ts-loader",
        },
      },
      {
        test: /\.m?js$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-env"],
            plugins: [
              ["@babel/plugin-proposal-class-properties", { loose: true }],
            ],
          },
        },
      },
    ],
  },
  devServer: {
    host: "localhost",
    port: "3001",
    disableHostCheck: true, // 取消host检查
  },
  resolve: {
    extensions: [".js", ".jsx", ".ts", ".tsx"],
  },
  output: output
};
