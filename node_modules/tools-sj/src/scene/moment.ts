export default function moment(date?: Date | string | number) {
  return new Moment(date)
}
interface FullObj {
  monday: number,
  sunday: number
}
class Moment {
  public date: Date
  oneDayStamp: number = 3600 * 1000 * 24
  constructor(date?: Date | string | number) {
    if (date) {
      if (typeof (date) === 'number') {
        console.log('数字类型')
        this.date = new Date(date)
      } else if (date.constructor === Date) {
        try {
          this.date = date
        }
        catch (error) {
          console.error('不支持')
        }
      } else if (typeof (date) === 'string') {
        try {
          this.date = new Date(date)
        }
        catch (error) {
          console.error('不支持')
        }
      } else {
        console.error('不支持')
      }
      console.log()
    } else {
      this.date = new Date()
    }
    if(new Date(this.date).toString()==='Invalid Date') {
      console.error('日期格式不正确，按照最近日期格式化')
      this.date = new Date()

    }

  }
  // 获取某个日期的时间戳
  getTimeStamp(date: string | Date): number {
    return +new Date(date)
  }
  // 获取传来的日期的年份
  years(): number {
    return new Date(this.date).getFullYear();
  }
  // 获取月
  months(mm?: string): number | string {
    let month = this.date.getMonth() + 1
    if (mm) {
      return month < 10 ? '0' + month : month;
    } else {
      return month;
    }
  }
  // 获取日
  days(dd?: string): number | string {
    let day = this.date.getDate()
    if (dd) {
      return day < 10 ? '0' + day : day;
    } else {
      return day;
    }
  }
  // 获取小时
  hours(hh?: string): number | string {
    let hour = this.date.getHours()
    if (hh) {
      return hour < 10 ? '0' + hour : hour;
    } else {
      return hour;
    }
  }
  // 获取分钟
  minutess(MM?: string): number | string {
    let minutes = this.date.getMinutes()
    if (MM) {
      return minutes < 10 ? '0' + minutes : minutes;
    } else {
      return minutes;
    }
  }
  // 获取分钟
  secondss(ss?: string): number | string {
    let seconds = this.date.getSeconds()
    if (ss) {
      return seconds < 10 ? '0' + seconds : seconds;
    } else {
      return seconds;
    }
  }
  // 获取周
  weeks(ww?: string, per?: string): number | string {
    let weeks = this.date.getDay()
    if (ww) {
      return this.formatweek(weeks, per)
    } else {
      return weeks;
    }
  }
  formatweek(week: number, per?: string) {
    const p = per || '星期'
    switch (week) {
      case 0:
        return p + '日'
      case 1:
        return p + '一'
      case 2:
        return p + '二'
      case 3:
        return p + '三'
      case 4:
        return p + '四'
      case 5:
        return p + '五'
      case 6:
        return p + '六'
    }
  }
  // 获取每天0点时间戳
  firstTimeStamp(date?: Date) {
    return new Date(new Date(date || this.date).setHours(0, 0, 0, 0)).getTime()
  }
  // 获取每天23：59：59时间戳
  lastTimeStamp(date?: Date) {
    return new Date(new Date(date || this.date).setHours(23, 59, 59, 999)).getTime()
  }
  // 获取某个月有多少天
  getMonthDays(y?: number, m?: number) {
    const year: number = y || this.years()
    const month: number | string = this.months()
    let days = new Date(year, m || Number(month), 0).getDate()
    return days
  }
  // 获取某年的天数
  getYearDays(y?: number) {
    let year = y || this.years()
    // let month = this.months()
    var s = 0
    var d
    for (var i = 1; i < 13; i++) {
      s = s + this.getMonthDays(year, i)
    };
    return s
  }

  // 获取某一天所在周的周一和周日
  getOneDayWeek(date?: Date): FullObj {
    // 按周日为一周的最后一天计算
    // 今天是这周的第几天
    var today = this.weeks()
    // 上周日距离今天的天数（负数表示）
    var stepSunDay = -today + 1

    // 周一距离今天的天数（负数表示）
    var stepMonday = 7 - (today as number)
    // 如果今天是周日
    if (today === 0) {
      stepSunDay = -6
      stepMonday = 0
    }

    var t = date || this.date
    var time = t.getTime()
    var monday = this.firstTimeStamp(new Date(time + stepSunDay * 24 * 3600 * 1000))
    var sunday = this.lastTimeStamp(new Date(time + stepMonday * 24 * 3600 * 1000))
    return {
      monday,
      sunday
    }
  }
  format(format: string): string {
    // 判断是否有年
    const yyyyReg = /yyyy/g;
    const yyReg = /yy/g;
    if (yyyyReg.test(format)) {
      format = format.replace(yyyyReg, this.years() + '')
    } else if (yyReg.test(format)) {
      format = format.replace(yyReg, this.years().toString().slice(2) + '')
    }
    format = format.replace(/mm/g, this.months('mm') + '')
    format = format.replace(/dd/g, this.days('dd') + '')
    format = format.replace(/hh/g, this.hours('hh') + '')
    format = format.replace(/MM/g, this.minutess('MM') + '')
    format = format.replace(/ss/g, this.secondss('ss') + '')

    format = format.replace(/m/g, this.months() + '')
    format = format.replace(/d/g, this.days() + '')
    format = format.replace(/h/g, this.hours() + '')
    format = format.replace(/M/g, this.minutess() + '')
    format = format.replace(/s/g, this.secondss() + '')
    return format
  }

}